
ADAS_Collision_Avoidance.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002690  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08002858  08002858  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002858  08002858  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08002860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  20000044  080028a4  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080028a4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004827  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001440  00000000  00000000  000248d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004f0  00000000  00000000  00025d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000034c  00000000  00000000  00026208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002198  00000000  00000000  00026554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ecd  00000000  00000000  000286ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000069fc  00000000  00000000  0002f5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000113c  00000000  00000000  00035fb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  000370f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000044 	.word	0x20000044
 800014c:	00000000 	.word	0x00000000
 8000150:	080027a8 	.word	0x080027a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000048 	.word	0x20000048
 800016c:	080027a8 	.word	0x080027a8

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	; 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <__aeabi_d2uiz>:
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	d211      	bcs.n	8000764 <__aeabi_d2uiz+0x28>
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000744:	d211      	bcs.n	800076a <__aeabi_d2uiz+0x2e>
 8000746:	d50d      	bpl.n	8000764 <__aeabi_d2uiz+0x28>
 8000748:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d40e      	bmi.n	8000770 <__aeabi_d2uiz+0x34>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	fa23 f002 	lsr.w	r0, r3, r2
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076e:	d102      	bne.n	8000776 <__aeabi_d2uiz+0x3a>
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <__aeabi_frsub>:
 800077c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000780:	e002      	b.n	8000788 <__addsf3>
 8000782:	bf00      	nop

08000784 <__aeabi_fsub>:
 8000784:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000788 <__addsf3>:
 8000788:	0042      	lsls	r2, r0, #1
 800078a:	bf1f      	itttt	ne
 800078c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000790:	ea92 0f03 	teqne	r2, r3
 8000794:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000798:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800079c:	d06a      	beq.n	8000874 <__addsf3+0xec>
 800079e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007a6:	bfc1      	itttt	gt
 80007a8:	18d2      	addgt	r2, r2, r3
 80007aa:	4041      	eorgt	r1, r0
 80007ac:	4048      	eorgt	r0, r1
 80007ae:	4041      	eorgt	r1, r0
 80007b0:	bfb8      	it	lt
 80007b2:	425b      	neglt	r3, r3
 80007b4:	2b19      	cmp	r3, #25
 80007b6:	bf88      	it	hi
 80007b8:	4770      	bxhi	lr
 80007ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80007d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80007d6:	bf18      	it	ne
 80007d8:	4249      	negne	r1, r1
 80007da:	ea92 0f03 	teq	r2, r3
 80007de:	d03f      	beq.n	8000860 <__addsf3+0xd8>
 80007e0:	f1a2 0201 	sub.w	r2, r2, #1
 80007e4:	fa41 fc03 	asr.w	ip, r1, r3
 80007e8:	eb10 000c 	adds.w	r0, r0, ip
 80007ec:	f1c3 0320 	rsb	r3, r3, #32
 80007f0:	fa01 f103 	lsl.w	r1, r1, r3
 80007f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007f8:	d502      	bpl.n	8000800 <__addsf3+0x78>
 80007fa:	4249      	negs	r1, r1
 80007fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000800:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000804:	d313      	bcc.n	800082e <__addsf3+0xa6>
 8000806:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800080a:	d306      	bcc.n	800081a <__addsf3+0x92>
 800080c:	0840      	lsrs	r0, r0, #1
 800080e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000812:	f102 0201 	add.w	r2, r2, #1
 8000816:	2afe      	cmp	r2, #254	; 0xfe
 8000818:	d251      	bcs.n	80008be <__addsf3+0x136>
 800081a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800081e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000822:	bf08      	it	eq
 8000824:	f020 0001 	biceq.w	r0, r0, #1
 8000828:	ea40 0003 	orr.w	r0, r0, r3
 800082c:	4770      	bx	lr
 800082e:	0049      	lsls	r1, r1, #1
 8000830:	eb40 0000 	adc.w	r0, r0, r0
 8000834:	3a01      	subs	r2, #1
 8000836:	bf28      	it	cs
 8000838:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800083c:	d2ed      	bcs.n	800081a <__addsf3+0x92>
 800083e:	fab0 fc80 	clz	ip, r0
 8000842:	f1ac 0c08 	sub.w	ip, ip, #8
 8000846:	ebb2 020c 	subs.w	r2, r2, ip
 800084a:	fa00 f00c 	lsl.w	r0, r0, ip
 800084e:	bfaa      	itet	ge
 8000850:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000854:	4252      	neglt	r2, r2
 8000856:	4318      	orrge	r0, r3
 8000858:	bfbc      	itt	lt
 800085a:	40d0      	lsrlt	r0, r2
 800085c:	4318      	orrlt	r0, r3
 800085e:	4770      	bx	lr
 8000860:	f092 0f00 	teq	r2, #0
 8000864:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000868:	bf06      	itte	eq
 800086a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800086e:	3201      	addeq	r2, #1
 8000870:	3b01      	subne	r3, #1
 8000872:	e7b5      	b.n	80007e0 <__addsf3+0x58>
 8000874:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000878:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800087c:	bf18      	it	ne
 800087e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000882:	d021      	beq.n	80008c8 <__addsf3+0x140>
 8000884:	ea92 0f03 	teq	r2, r3
 8000888:	d004      	beq.n	8000894 <__addsf3+0x10c>
 800088a:	f092 0f00 	teq	r2, #0
 800088e:	bf08      	it	eq
 8000890:	4608      	moveq	r0, r1
 8000892:	4770      	bx	lr
 8000894:	ea90 0f01 	teq	r0, r1
 8000898:	bf1c      	itt	ne
 800089a:	2000      	movne	r0, #0
 800089c:	4770      	bxne	lr
 800089e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80008a2:	d104      	bne.n	80008ae <__addsf3+0x126>
 80008a4:	0040      	lsls	r0, r0, #1
 80008a6:	bf28      	it	cs
 80008a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80008ac:	4770      	bx	lr
 80008ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80008b2:	bf3c      	itt	cc
 80008b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80008b8:	4770      	bxcc	lr
 80008ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80008be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80008c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008c6:	4770      	bx	lr
 80008c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008cc:	bf16      	itet	ne
 80008ce:	4608      	movne	r0, r1
 80008d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008d4:	4601      	movne	r1, r0
 80008d6:	0242      	lsls	r2, r0, #9
 80008d8:	bf06      	itte	eq
 80008da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008de:	ea90 0f01 	teqeq	r0, r1
 80008e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80008e6:	4770      	bx	lr

080008e8 <__aeabi_ui2f>:
 80008e8:	f04f 0300 	mov.w	r3, #0
 80008ec:	e004      	b.n	80008f8 <__aeabi_i2f+0x8>
 80008ee:	bf00      	nop

080008f0 <__aeabi_i2f>:
 80008f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80008f4:	bf48      	it	mi
 80008f6:	4240      	negmi	r0, r0
 80008f8:	ea5f 0c00 	movs.w	ip, r0
 80008fc:	bf08      	it	eq
 80008fe:	4770      	bxeq	lr
 8000900:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000904:	4601      	mov	r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	e01c      	b.n	8000946 <__aeabi_l2f+0x2a>

0800090c <__aeabi_ul2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	e00a      	b.n	8000930 <__aeabi_l2f+0x14>
 800091a:	bf00      	nop

0800091c <__aeabi_l2f>:
 800091c:	ea50 0201 	orrs.w	r2, r0, r1
 8000920:	bf08      	it	eq
 8000922:	4770      	bxeq	lr
 8000924:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000928:	d502      	bpl.n	8000930 <__aeabi_l2f+0x14>
 800092a:	4240      	negs	r0, r0
 800092c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000930:	ea5f 0c01 	movs.w	ip, r1
 8000934:	bf02      	ittt	eq
 8000936:	4684      	moveq	ip, r0
 8000938:	4601      	moveq	r1, r0
 800093a:	2000      	moveq	r0, #0
 800093c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000940:	bf08      	it	eq
 8000942:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000946:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800094a:	fabc f28c 	clz	r2, ip
 800094e:	3a08      	subs	r2, #8
 8000950:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000954:	db10      	blt.n	8000978 <__aeabi_l2f+0x5c>
 8000956:	fa01 fc02 	lsl.w	ip, r1, r2
 800095a:	4463      	add	r3, ip
 800095c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000960:	f1c2 0220 	rsb	r2, r2, #32
 8000964:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000968:	fa20 f202 	lsr.w	r2, r0, r2
 800096c:	eb43 0002 	adc.w	r0, r3, r2
 8000970:	bf08      	it	eq
 8000972:	f020 0001 	biceq.w	r0, r0, #1
 8000976:	4770      	bx	lr
 8000978:	f102 0220 	add.w	r2, r2, #32
 800097c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000980:	f1c2 0220 	rsb	r2, r2, #32
 8000984:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000988:	fa21 f202 	lsr.w	r2, r1, r2
 800098c:	eb43 0002 	adc.w	r0, r3, r2
 8000990:	bf08      	it	eq
 8000992:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000996:	4770      	bx	lr

08000998 <__aeabi_fmul>:
 8000998:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800099c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009a0:	bf1e      	ittt	ne
 80009a2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009a6:	ea92 0f0c 	teqne	r2, ip
 80009aa:	ea93 0f0c 	teqne	r3, ip
 80009ae:	d06f      	beq.n	8000a90 <__aeabi_fmul+0xf8>
 80009b0:	441a      	add	r2, r3
 80009b2:	ea80 0c01 	eor.w	ip, r0, r1
 80009b6:	0240      	lsls	r0, r0, #9
 80009b8:	bf18      	it	ne
 80009ba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009be:	d01e      	beq.n	80009fe <__aeabi_fmul+0x66>
 80009c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009c4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009c8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009cc:	fba0 3101 	umull	r3, r1, r0, r1
 80009d0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009d4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009d8:	bf3e      	ittt	cc
 80009da:	0049      	lslcc	r1, r1, #1
 80009dc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009e0:	005b      	lslcc	r3, r3, #1
 80009e2:	ea40 0001 	orr.w	r0, r0, r1
 80009e6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009ea:	2afd      	cmp	r2, #253	; 0xfd
 80009ec:	d81d      	bhi.n	8000a2a <__aeabi_fmul+0x92>
 80009ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80009f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009f6:	bf08      	it	eq
 80009f8:	f020 0001 	biceq.w	r0, r0, #1
 80009fc:	4770      	bx	lr
 80009fe:	f090 0f00 	teq	r0, #0
 8000a02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a06:	bf08      	it	eq
 8000a08:	0249      	lsleq	r1, r1, #9
 8000a0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a12:	3a7f      	subs	r2, #127	; 0x7f
 8000a14:	bfc2      	ittt	gt
 8000a16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a1e:	4770      	bxgt	lr
 8000a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a24:	f04f 0300 	mov.w	r3, #0
 8000a28:	3a01      	subs	r2, #1
 8000a2a:	dc5d      	bgt.n	8000ae8 <__aeabi_fmul+0x150>
 8000a2c:	f112 0f19 	cmn.w	r2, #25
 8000a30:	bfdc      	itt	le
 8000a32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a36:	4770      	bxle	lr
 8000a38:	f1c2 0200 	rsb	r2, r2, #0
 8000a3c:	0041      	lsls	r1, r0, #1
 8000a3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a42:	f1c2 0220 	rsb	r2, r2, #32
 8000a46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a4e:	f140 0000 	adc.w	r0, r0, #0
 8000a52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a56:	bf08      	it	eq
 8000a58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a5c:	4770      	bx	lr
 8000a5e:	f092 0f00 	teq	r2, #0
 8000a62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a66:	bf02      	ittt	eq
 8000a68:	0040      	lsleq	r0, r0, #1
 8000a6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a6e:	3a01      	subeq	r2, #1
 8000a70:	d0f9      	beq.n	8000a66 <__aeabi_fmul+0xce>
 8000a72:	ea40 000c 	orr.w	r0, r0, ip
 8000a76:	f093 0f00 	teq	r3, #0
 8000a7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a7e:	bf02      	ittt	eq
 8000a80:	0049      	lsleq	r1, r1, #1
 8000a82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a86:	3b01      	subeq	r3, #1
 8000a88:	d0f9      	beq.n	8000a7e <__aeabi_fmul+0xe6>
 8000a8a:	ea41 010c 	orr.w	r1, r1, ip
 8000a8e:	e78f      	b.n	80009b0 <__aeabi_fmul+0x18>
 8000a90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a94:	ea92 0f0c 	teq	r2, ip
 8000a98:	bf18      	it	ne
 8000a9a:	ea93 0f0c 	teqne	r3, ip
 8000a9e:	d00a      	beq.n	8000ab6 <__aeabi_fmul+0x11e>
 8000aa0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000aa4:	bf18      	it	ne
 8000aa6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000aaa:	d1d8      	bne.n	8000a5e <__aeabi_fmul+0xc6>
 8000aac:	ea80 0001 	eor.w	r0, r0, r1
 8000ab0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ab4:	4770      	bx	lr
 8000ab6:	f090 0f00 	teq	r0, #0
 8000aba:	bf17      	itett	ne
 8000abc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	f091 0f00 	teqne	r1, #0
 8000ac6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000aca:	d014      	beq.n	8000af6 <__aeabi_fmul+0x15e>
 8000acc:	ea92 0f0c 	teq	r2, ip
 8000ad0:	d101      	bne.n	8000ad6 <__aeabi_fmul+0x13e>
 8000ad2:	0242      	lsls	r2, r0, #9
 8000ad4:	d10f      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ad6:	ea93 0f0c 	teq	r3, ip
 8000ada:	d103      	bne.n	8000ae4 <__aeabi_fmul+0x14c>
 8000adc:	024b      	lsls	r3, r1, #9
 8000ade:	bf18      	it	ne
 8000ae0:	4608      	movne	r0, r1
 8000ae2:	d108      	bne.n	8000af6 <__aeabi_fmul+0x15e>
 8000ae4:	ea80 0001 	eor.w	r0, r0, r1
 8000ae8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000aec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af4:	4770      	bx	lr
 8000af6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000afa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_fdiv>:
 8000b00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b08:	bf1e      	ittt	ne
 8000b0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b0e:	ea92 0f0c 	teqne	r2, ip
 8000b12:	ea93 0f0c 	teqne	r3, ip
 8000b16:	d069      	beq.n	8000bec <__aeabi_fdiv+0xec>
 8000b18:	eba2 0203 	sub.w	r2, r2, r3
 8000b1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b20:	0249      	lsls	r1, r1, #9
 8000b22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b26:	d037      	beq.n	8000b98 <__aeabi_fdiv+0x98>
 8000b28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b38:	428b      	cmp	r3, r1
 8000b3a:	bf38      	it	cc
 8000b3c:	005b      	lslcc	r3, r3, #1
 8000b3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b46:	428b      	cmp	r3, r1
 8000b48:	bf24      	itt	cs
 8000b4a:	1a5b      	subcs	r3, r3, r1
 8000b4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b54:	bf24      	itt	cs
 8000b56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b62:	bf24      	itt	cs
 8000b64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b70:	bf24      	itt	cs
 8000b72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	bf18      	it	ne
 8000b7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b82:	d1e0      	bne.n	8000b46 <__aeabi_fdiv+0x46>
 8000b84:	2afd      	cmp	r2, #253	; 0xfd
 8000b86:	f63f af50 	bhi.w	8000a2a <__aeabi_fmul+0x92>
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ba0:	327f      	adds	r2, #127	; 0x7f
 8000ba2:	bfc2      	ittt	gt
 8000ba4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ba8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bac:	4770      	bxgt	lr
 8000bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	3a01      	subs	r2, #1
 8000bb8:	e737      	b.n	8000a2a <__aeabi_fmul+0x92>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bc2:	bf02      	ittt	eq
 8000bc4:	0040      	lsleq	r0, r0, #1
 8000bc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bca:	3a01      	subeq	r2, #1
 8000bcc:	d0f9      	beq.n	8000bc2 <__aeabi_fdiv+0xc2>
 8000bce:	ea40 000c 	orr.w	r0, r0, ip
 8000bd2:	f093 0f00 	teq	r3, #0
 8000bd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bda:	bf02      	ittt	eq
 8000bdc:	0049      	lsleq	r1, r1, #1
 8000bde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000be2:	3b01      	subeq	r3, #1
 8000be4:	d0f9      	beq.n	8000bda <__aeabi_fdiv+0xda>
 8000be6:	ea41 010c 	orr.w	r1, r1, ip
 8000bea:	e795      	b.n	8000b18 <__aeabi_fdiv+0x18>
 8000bec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bf0:	ea92 0f0c 	teq	r2, ip
 8000bf4:	d108      	bne.n	8000c08 <__aeabi_fdiv+0x108>
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	f47f af7d 	bne.w	8000af6 <__aeabi_fmul+0x15e>
 8000bfc:	ea93 0f0c 	teq	r3, ip
 8000c00:	f47f af70 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e776      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c08:	ea93 0f0c 	teq	r3, ip
 8000c0c:	d104      	bne.n	8000c18 <__aeabi_fdiv+0x118>
 8000c0e:	024b      	lsls	r3, r1, #9
 8000c10:	f43f af4c 	beq.w	8000aac <__aeabi_fmul+0x114>
 8000c14:	4608      	mov	r0, r1
 8000c16:	e76e      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c1c:	bf18      	it	ne
 8000c1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c22:	d1ca      	bne.n	8000bba <__aeabi_fdiv+0xba>
 8000c24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c28:	f47f af5c 	bne.w	8000ae4 <__aeabi_fmul+0x14c>
 8000c2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	f47f af3c 	bne.w	8000aac <__aeabi_fmul+0x114>
 8000c34:	e75f      	b.n	8000af6 <__aeabi_fmul+0x15e>
 8000c36:	bf00      	nop

08000c38 <__gesf2>:
 8000c38:	f04f 3cff 	mov.w	ip, #4294967295
 8000c3c:	e006      	b.n	8000c4c <__cmpsf2+0x4>
 8000c3e:	bf00      	nop

08000c40 <__lesf2>:
 8000c40:	f04f 0c01 	mov.w	ip, #1
 8000c44:	e002      	b.n	8000c4c <__cmpsf2+0x4>
 8000c46:	bf00      	nop

08000c48 <__cmpsf2>:
 8000c48:	f04f 0c01 	mov.w	ip, #1
 8000c4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	bf18      	it	ne
 8000c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c62:	d011      	beq.n	8000c88 <__cmpsf2+0x40>
 8000c64:	b001      	add	sp, #4
 8000c66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c6a:	bf18      	it	ne
 8000c6c:	ea90 0f01 	teqne	r0, r1
 8000c70:	bf58      	it	pl
 8000c72:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c76:	bf88      	it	hi
 8000c78:	17c8      	asrhi	r0, r1, #31
 8000c7a:	bf38      	it	cc
 8000c7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c80:	bf18      	it	ne
 8000c82:	f040 0001 	orrne.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c8c:	d102      	bne.n	8000c94 <__cmpsf2+0x4c>
 8000c8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c92:	d105      	bne.n	8000ca0 <__cmpsf2+0x58>
 8000c94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c98:	d1e4      	bne.n	8000c64 <__cmpsf2+0x1c>
 8000c9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c9e:	d0e1      	beq.n	8000c64 <__cmpsf2+0x1c>
 8000ca0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_cfrcmple>:
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4608      	mov	r0, r1
 8000cac:	4661      	mov	r1, ip
 8000cae:	e7ff      	b.n	8000cb0 <__aeabi_cfcmpeq>

08000cb0 <__aeabi_cfcmpeq>:
 8000cb0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cb2:	f7ff ffc9 	bl	8000c48 <__cmpsf2>
 8000cb6:	2800      	cmp	r0, #0
 8000cb8:	bf48      	it	mi
 8000cba:	f110 0f00 	cmnmi.w	r0, #0
 8000cbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cc0 <__aeabi_fcmpeq>:
 8000cc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc4:	f7ff fff4 	bl	8000cb0 <__aeabi_cfcmpeq>
 8000cc8:	bf0c      	ite	eq
 8000cca:	2001      	moveq	r0, #1
 8000ccc:	2000      	movne	r0, #0
 8000cce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_fcmplt>:
 8000cd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd8:	f7ff ffea 	bl	8000cb0 <__aeabi_cfcmpeq>
 8000cdc:	bf34      	ite	cc
 8000cde:	2001      	movcc	r0, #1
 8000ce0:	2000      	movcs	r0, #0
 8000ce2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_fcmple>:
 8000ce8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cec:	f7ff ffe0 	bl	8000cb0 <__aeabi_cfcmpeq>
 8000cf0:	bf94      	ite	ls
 8000cf2:	2001      	movls	r0, #1
 8000cf4:	2000      	movhi	r0, #0
 8000cf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfa:	bf00      	nop

08000cfc <__aeabi_fcmpge>:
 8000cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d00:	f7ff ffd2 	bl	8000ca8 <__aeabi_cfrcmple>
 8000d04:	bf94      	ite	ls
 8000d06:	2001      	movls	r0, #1
 8000d08:	2000      	movhi	r0, #0
 8000d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0e:	bf00      	nop

08000d10 <__aeabi_fcmpgt>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff ffc8 	bl	8000ca8 <__aeabi_cfrcmple>
 8000d18:	bf34      	ite	cc
 8000d1a:	2001      	movcc	r0, #1
 8000d1c:	2000      	movcs	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_f2uiz>:
 8000d24:	0042      	lsls	r2, r0, #1
 8000d26:	d20e      	bcs.n	8000d46 <__aeabi_f2uiz+0x22>
 8000d28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d2c:	d30b      	bcc.n	8000d46 <__aeabi_f2uiz+0x22>
 8000d2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d36:	d409      	bmi.n	8000d4c <__aeabi_f2uiz+0x28>
 8000d38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d40:	fa23 f002 	lsr.w	r0, r3, r2
 8000d44:	4770      	bx	lr
 8000d46:	f04f 0000 	mov.w	r0, #0
 8000d4a:	4770      	bx	lr
 8000d4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d50:	d101      	bne.n	8000d56 <__aeabi_f2uiz+0x32>
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	d102      	bne.n	8000d5c <__aeabi_f2uiz+0x38>
 8000d56:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5a:	4770      	bx	lr
 8000d5c:	f04f 0000 	mov.w	r0, #0
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <ACC>:
extern uint8_t G_u8DataFromRaspberrypi;



void ACC(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	Ultrasonic_Distance_value =	Ultrasonic_readDistance(&Ultrasonic_FrontConf);
 8000d6a:	4814      	ldr	r0, [pc, #80]	; (8000dbc <ACC+0x58>)
 8000d6c:	f001 fab8 	bl	80022e0 <Ultrasonic_readDistance>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4a13      	ldr	r2, [pc, #76]	; (8000dc0 <ACC+0x5c>)
 8000d74:	6013      	str	r3, [r2, #0]
	uint8_t SpeedFromFrontCar = G_u8DataFromRaspberrypi;
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <ACC+0x60>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]

	if (Ultrasonic_Distance_value < SAFE_DISTANCE)
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <ACC+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b18      	cmp	r3, #24
 8000d82:	d808      	bhi.n	8000d96 <ACC+0x32>
	{
		Current_Speed = SpeedFromFrontCar  ;
 8000d84:	4a10      	ldr	r2, [pc, #64]	; (8000dc8 <ACC+0x64>)
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	7013      	strb	r3, [r2, #0]
		MOTORS_Forward(Current_Speed);
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <ACC+0x64>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fd68 	bl	8001864 <MOTORS_Forward>
 8000d94:	e00b      	b.n	8000dae <ACC+0x4a>
	}

	else if (Ultrasonic_Distance_value >= SAFE_DISTANCE)
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <ACC+0x5c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b18      	cmp	r3, #24
 8000d9c:	d907      	bls.n	8000dae <ACC+0x4a>
	{
		Current_Speed = MAX_SPEED;
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <ACC+0x64>)
 8000da0:	223c      	movs	r2, #60	; 0x3c
 8000da2:	701a      	strb	r2, [r3, #0]
		MOTORS_Forward(Current_Speed);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <ACC+0x64>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f000 fd5b 	bl	8001864 <MOTORS_Forward>
	}
	else{}

	SYSTICK_DelayMs(100);
 8000dae:	2064      	movs	r0, #100	; 0x64
 8000db0:	f001 f864 	bl	8001e7c <SYSTICK_DelayMs>
}
 8000db4:	bf00      	nop
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000038 	.word	0x20000038
 8000dc0:	20000060 	.word	0x20000060
 8000dc4:	20000091 	.word	0x20000091
 8000dc8:	20000092 	.word	0x20000092

08000dcc <AEB>:
extern uint8_t G_u8DataFromBluetooth;

uint32_t Distance_From_Ultrasonic = 0;

void AEB()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	if(Move == MOVE_FORWARD || Move == MOVE_LEFT_FORWARD || Move == MOVE_RIGHT_FORWARD)
 8000dd0:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <AEB+0xc8>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b46      	cmp	r3, #70	; 0x46
 8000dd6:	d007      	beq.n	8000de8 <AEB+0x1c>
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <AEB+0xc8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b4c      	cmp	r3, #76	; 0x4c
 8000dde:	d003      	beq.n	8000de8 <AEB+0x1c>
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <AEB+0xc8>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b52      	cmp	r3, #82	; 0x52
 8000de6:	d106      	bne.n	8000df6 <AEB+0x2a>
	{
		Distance_From_Ultrasonic = Ultrasonic_readDistance(&Ultrasonic_FrontConf);
 8000de8:	482b      	ldr	r0, [pc, #172]	; (8000e98 <AEB+0xcc>)
 8000dea:	f001 fa79 	bl	80022e0 <Ultrasonic_readDistance>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4a2a      	ldr	r2, [pc, #168]	; (8000e9c <AEB+0xd0>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e005      	b.n	8000e02 <AEB+0x36>
	}
	else
	{
		Distance_From_Ultrasonic = Ultrasonic_readDistance(&Ultrasonic_BackConf);
 8000df6:	482a      	ldr	r0, [pc, #168]	; (8000ea0 <AEB+0xd4>)
 8000df8:	f001 fa72 	bl	80022e0 <Ultrasonic_readDistance>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <AEB+0xd0>)
 8000e00:	6013      	str	r3, [r2, #0]
	}


	if(Distance_From_Ultrasonic < MINIMUM_DISTANCE)
 8000e02:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <AEB+0xd0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b13      	cmp	r3, #19
 8000e08:	d80b      	bhi.n	8000e22 <AEB+0x56>
	{
		MOTORS_Stop();
 8000e0a:	f000 fda2 	bl	8001952 <MOTORS_Stop>
		Current_Speed = 0;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <AEB+0xd8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
		Buzzer_vTurnOff(&Buzzer1);
 8000e14:	4824      	ldr	r0, [pc, #144]	; (8000ea8 <AEB+0xdc>)
 8000e16:	f000 f867 	bl	8000ee8 <Buzzer_vTurnOff>
		Buzzer_ON = 0;
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <AEB+0xe0>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
			Buzzer_ON = 0;
			Buzzer_vTurnOff(&Buzzer1);
		}
		else{};
	}
}
 8000e20:	e036      	b.n	8000e90 <AEB+0xc4>
	else if(Distance_From_Ultrasonic <= MAXIMUM_DISTANCE) //Buzzer ON , Warning
 8000e22:	4b1e      	ldr	r3, [pc, #120]	; (8000e9c <AEB+0xd0>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b32      	cmp	r3, #50	; 0x32
 8000e28:	d828      	bhi.n	8000e7c <AEB+0xb0>
		if(!Buzzer_ON && Current_Speed != 0)
 8000e2a:	4b20      	ldr	r3, [pc, #128]	; (8000eac <AEB+0xe0>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10a      	bne.n	8000e48 <AEB+0x7c>
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <AEB+0xd8>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d006      	beq.n	8000e48 <AEB+0x7c>
			Buzzer_ON = 1;
 8000e3a:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <AEB+0xe0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
			Buzzer_vTurnOn(&Buzzer1);
 8000e40:	4819      	ldr	r0, [pc, #100]	; (8000ea8 <AEB+0xdc>)
 8000e42:	f000 f841 	bl	8000ec8 <Buzzer_vTurnOn>
 8000e46:	e00d      	b.n	8000e64 <AEB+0x98>
		else if(Buzzer_ON && Current_Speed == 0)
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <AEB+0xe0>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d009      	beq.n	8000e64 <AEB+0x98>
 8000e50:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <AEB+0xd8>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <AEB+0x98>
			Buzzer_ON = 0;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <AEB+0xe0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	701a      	strb	r2, [r3, #0]
			Buzzer_vTurnOff(&Buzzer1);
 8000e5e:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <AEB+0xdc>)
 8000e60:	f000 f842 	bl	8000ee8 <Buzzer_vTurnOff>
		if(Current_Speed > SPEED_40)
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <AEB+0xd8>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	2b34      	cmp	r3, #52	; 0x34
 8000e6a:	d911      	bls.n	8000e90 <AEB+0xc4>
			Current_Speed = SPEED_40;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <AEB+0xd8>)
 8000e6e:	2234      	movs	r2, #52	; 0x34
 8000e70:	701a      	strb	r2, [r3, #0]
			G_u8DataFromBluetooth = Move;
 8000e72:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <AEB+0xc8>)
 8000e74:	781a      	ldrb	r2, [r3, #0]
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <AEB+0xe4>)
 8000e78:	701a      	strb	r2, [r3, #0]
}
 8000e7a:	e009      	b.n	8000e90 <AEB+0xc4>
		if(Buzzer_ON)
 8000e7c:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <AEB+0xe0>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d005      	beq.n	8000e90 <AEB+0xc4>
			Buzzer_ON = 0;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <AEB+0xe0>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
			Buzzer_vTurnOff(&Buzzer1);
 8000e8a:	4807      	ldr	r0, [pc, #28]	; (8000ea8 <AEB+0xdc>)
 8000e8c:	f000 f82c 	bl	8000ee8 <Buzzer_vTurnOff>
}
 8000e90:	bf00      	nop
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000040 	.word	0x20000040
 8000e98:	20000038 	.word	0x20000038
 8000e9c:	20000064 	.word	0x20000064
 8000ea0:	2000003c 	.word	0x2000003c
 8000ea4:	20000092 	.word	0x20000092
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000093 	.word	0x20000093
 8000eb0:	20000090 	.word	0x20000090

08000eb4 <Buzzer_vInit>:
 * @brief	:	Initializes the Buzzer
 * @param	:	void
 * @retval	:	void
 */
void Buzzer_vInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	GPIO_u8PinInit(&Buzzer1_PinConfig);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <Buzzer_vInit+0x10>)
 8000eba:	f000 f825 	bl	8000f08 <GPIO_u8PinInit>
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	08002850 	.word	0x08002850

08000ec8 <Buzzer_vTurnOn>:
 * @brief	:	Turn on the Buzzer
 * @param	:	Buzzer_Conf     (Buzzer_t*)
 * @retval	:	void
 */
void Buzzer_vTurnOn(Buzzer_t* Buzzer_Conf)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	GPIO_u8SetPinValue(Buzzer_Conf->BuzzerPort , Buzzer_Conf->BuzzerPin , PIN_HIGH);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7818      	ldrb	r0, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	785b      	ldrb	r3, [r3, #1]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	4619      	mov	r1, r3
 8000edc:	f000 f984 	bl	80011e8 <GPIO_u8SetPinValue>
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <Buzzer_vTurnOff>:
 * @brief	:	Turn off the Buzzer
 * @param	:	Buzzer_Conf     (Buzzer_t*)
 * @retval	:	void
 */
void Buzzer_vTurnOff(Buzzer_t* Buzzer_Conf)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	GPIO_u8SetPinValue(Buzzer_Conf->BuzzerPort , Buzzer_Conf->BuzzerPin , PIN_LOW);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7818      	ldrb	r0, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4619      	mov	r1, r3
 8000efc:	f000 f974 	bl	80011e8 <GPIO_u8SetPinValue>
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <GPIO_u8PinInit>:
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *  PinConfig:	Port, PinNum, Mode,
 *              OutputConfig, InputConfig
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* PinConfig)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	uint8_t Local_ErrorState=OK;
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
	/*Check weather the pointer points to Null or Not*/
	if(PinConfig != NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f000 815b 	beq.w	80011d2 <GPIO_u8PinInit+0x2ca>
	{
		/*Check weather the configurations are valid or Not*/
		if((PinConfig->Port <= PORTG) && (PinConfig->PinNum <= PIN15) &&
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	f200 8153 	bhi.w	80011cc <GPIO_u8PinInit+0x2c4>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	2b0f      	cmp	r3, #15
 8000f2c:	f200 814e 	bhi.w	80011cc <GPIO_u8PinInit+0x2c4>
				(PinConfig->Mode <= OUTPUT_MODE50MHZ) && (PinConfig->InputConf <= INPUT_PUPD )
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	789b      	ldrb	r3, [r3, #2]
		if((PinConfig->Port <= PORTG) && (PinConfig->PinNum <= PIN15) &&
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	f200 8149 	bhi.w	80011cc <GPIO_u8PinInit+0x2c4>
				(PinConfig->Mode <= OUTPUT_MODE50MHZ) && (PinConfig->InputConf <= INPUT_PUPD )
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	78db      	ldrb	r3, [r3, #3]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	f200 8144 	bhi.w	80011cc <GPIO_u8PinInit+0x2c4>
				&& (PinConfig->OutputConf <=AF_OUTPUT_OD) )
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	791b      	ldrb	r3, [r3, #4]
 8000f48:	2b03      	cmp	r3, #3
 8000f4a:	f200 813f 	bhi.w	80011cc <GPIO_u8PinInit+0x2c4>
		{
			/* * * * * Select GPIO Mode: Input, OUTPUT_MODE10MHZ, OUTPUT_MODE10MHZ, OUTPUT_MODE10MHZ * * * * */
			if(PinConfig->PinNum <= PIN7)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	2b07      	cmp	r3, #7
 8000f54:	f200 8097 	bhi.w	8001086 <GPIO_u8PinInit+0x17e>
			{
				/*Pins from PIN0 to PIN7*/
				GPIOx[PinConfig->Port]->GPIOx_CRL&=~(CRL_MASK<<(CRL_PIN_ACCESS*PinConfig->PinNum)) ;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4ba1      	ldr	r3, [pc, #644]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	4619      	mov	r1, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	4b99      	ldr	r3, [pc, #612]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8000f7e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000f82:	400a      	ands	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
				GPIOx[PinConfig->Port]->GPIOx_CRL |= ( PinConfig->Mode <<(CRL_PIN_ACCESS*PinConfig->PinNum));
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b95      	ldr	r3, [pc, #596]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	785b      	ldrb	r3, [r3, #1]
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	4b8d      	ldr	r3, [pc, #564]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8000fae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	601a      	str	r2, [r3, #0]

				/*Check weather the mode is input or output*/
				if(PinConfig->Mode == INPUT_MODE)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	789b      	ldrb	r3, [r3, #2]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d131      	bne.n	8001022 <GPIO_u8PinInit+0x11a>
				{
					/*input*/
					GPIOx[PinConfig->Port]->GPIOx_CRL &=~(CRL_MASK<<(CNF_OFFSET+(CRL_PIN_ACCESS*PinConfig->PinNum))) ;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4b87      	ldr	r3, [pc, #540]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8000fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	785b      	ldrb	r3, [r3, #1]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	4b7f      	ldr	r3, [pc, #508]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8000fe6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000fea:	400a      	ands	r2, r1
 8000fec:	601a      	str	r2, [r3, #0]
					GPIOx[PinConfig->Port]->GPIOx_CRL |= ( PinConfig->InputConf <<(CNF_OFFSET+(CRL_PIN_ACCESS*PinConfig->PinNum)));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b7b      	ldr	r3, [pc, #492]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	78db      	ldrb	r3, [r3, #3]
 8001000:	4619      	mov	r1, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	785b      	ldrb	r3, [r3, #1]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	3302      	adds	r3, #2
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	4619      	mov	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	4b73      	ldr	r3, [pc, #460]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8001018:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]
			if(PinConfig->PinNum <= PIN7)
 8001020:	e0d9      	b.n	80011d6 <GPIO_u8PinInit+0x2ce>
				}else
				{
					/*output*/
					GPIOx[PinConfig->Port]->GPIOx_CRL &=~(CRL_MASK<<(CNF_OFFSET+(CRL_PIN_ACCESS*PinConfig->PinNum))) ;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	4b6e      	ldr	r3, [pc, #440]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 800102a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	785b      	ldrb	r3, [r3, #1]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	2103      	movs	r1, #3
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	4619      	mov	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	4b66      	ldr	r3, [pc, #408]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 800104a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800104e:	400a      	ands	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
					GPIOx[PinConfig->Port]->GPIOx_CRL |= ( PinConfig->OutputConf <<(CNF_OFFSET+(CRL_PIN_ACCESS*PinConfig->PinNum)));
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	791b      	ldrb	r3, [r3, #4]
 8001064:	4619      	mov	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	785b      	ldrb	r3, [r3, #1]
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	3302      	adds	r3, #2
 800106e:	fa01 f303 	lsl.w	r3, r1, r3
 8001072:	4619      	mov	r1, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	4b5a      	ldr	r3, [pc, #360]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 800107c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001080:	430a      	orrs	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
			if(PinConfig->PinNum <= PIN7)
 8001084:	e0a7      	b.n	80011d6 <GPIO_u8PinInit+0x2ce>

			}
			else
			{
				/*****from PIN8 to PIN15*****/
				GPIOx[PinConfig->Port]->GPIOx_CRH &=~(CRH_MASK<<(CRH_PIN_ACCESS*((PinConfig->PinNum)%H_FAC))) ;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	785b      	ldrb	r3, [r3, #1]
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	2103      	movs	r1, #3
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	4619      	mov	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	4b4d      	ldr	r3, [pc, #308]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 80010b0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010b4:	400a      	ands	r2, r1
 80010b6:	605a      	str	r2, [r3, #4]
				GPIOx[PinConfig->Port]->GPIOx_CRH |= ( PinConfig->Mode <<(CRH_PIN_ACCESS*((PinConfig->PinNum)%H_FAC)));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 80010c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	789b      	ldrb	r3, [r3, #2]
 80010ca:	4619      	mov	r1, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	785b      	ldrb	r3, [r3, #1]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	fa01 f303 	lsl.w	r3, r1, r3
 80010da:	4619      	mov	r1, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	4b40      	ldr	r3, [pc, #256]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 80010e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	605a      	str	r2, [r3, #4]

				/*Check weather the mode is input or output*/
				if(PinConfig->Mode == INPUT_MODE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	789b      	ldrb	r3, [r3, #2]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d135      	bne.n	8001160 <GPIO_u8PinInit+0x258>
				{
					/*input*/
					GPIOx[PinConfig->Port]->GPIOx_CRH &=~(CRH_MASK<<( CNF_OFFSET+ (CRH_PIN_ACCESS*((PinConfig->PinNum) %H_FAC) ) ) ) ;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b3a      	ldr	r3, [pc, #232]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	785b      	ldrb	r3, [r3, #1]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	3302      	adds	r3, #2
 800110e:	2103      	movs	r1, #3
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	4b31      	ldr	r3, [pc, #196]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8001120:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001124:	400a      	ands	r2, r1
 8001126:	605a      	str	r2, [r3, #4]
					GPIOx[PinConfig->Port]->GPIOx_CRH |= ( PinConfig->InputConf <<(CNF_OFFSET+( CRH_PIN_ACCESS* ( (PinConfig->PinNum) %H_FAC) ) ) );
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8001130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	78db      	ldrb	r3, [r3, #3]
 800113a:	4619      	mov	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4619      	mov	r1, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4618      	mov	r0, r3
 8001154:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8001156:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800115a:	430a      	orrs	r2, r1
 800115c:	605a      	str	r2, [r3, #4]
			if(PinConfig->PinNum <= PIN7)
 800115e:	e03a      	b.n	80011d6 <GPIO_u8PinInit+0x2ce>
				}else
				{
					/*output*/
					GPIOx[PinConfig->Port]->GPIOx_CRH &=~(CRH_MASK<<( CNF_OFFSET+ (CRH_PIN_ACCESS*((PinConfig->PinNum) %H_FAC) ) ) ) ;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 8001168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	785b      	ldrb	r3, [r3, #1]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	3302      	adds	r3, #2
 800117a:	2103      	movs	r1, #3
 800117c:	fa01 f303 	lsl.w	r3, r1, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	4619      	mov	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 800118c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001190:	400a      	ands	r2, r1
 8001192:	605a      	str	r2, [r3, #4]
					GPIOx[PinConfig->Port]->GPIOx_CRH |= ( PinConfig->OutputConf <<(CNF_OFFSET+( CRH_PIN_ACCESS* ( (PinConfig->PinNum) %H_FAC) ) ) );
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 800119c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	791b      	ldrb	r3, [r3, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	4619      	mov	r1, r3
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <GPIO_u8PinInit+0x2dc>)
 80011c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	605a      	str	r2, [r3, #4]
			if(PinConfig->PinNum <= PIN7)
 80011ca:	e004      	b.n	80011d6 <GPIO_u8PinInit+0x2ce>
				}
			}
		}
		else
		{
			Local_ErrorState=NOK;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
 80011d0:	e001      	b.n	80011d6 <GPIO_u8PinInit+0x2ce>
		}

	}
	else
	{
		Local_ErrorState=NULL_POINTER;
 80011d2:	2302      	movs	r3, #2
 80011d4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_ErrorState;
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000004 	.word	0x20000004

080011e8 <GPIO_u8SetPinValue>:
 * @param[in] Port ,PinNum ,PinVal
 * @retval Local_u8ErrorState
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
uint8_t GPIO_u8SetPinValue(Port_t	Port , Pin_t	PinNum , PinVal_t PinVal)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
 80011f2:	460b      	mov	r3, r1
 80011f4:	71bb      	strb	r3, [r7, #6]
 80011f6:	4613      	mov	r3, r2
 80011f8:	717b      	strb	r3, [r7, #5]
	uint8_t Local_ErrorState=OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	73fb      	strb	r3, [r7, #15]

	if((Port<=PORTG) && (PinNum<=PIN15))
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	2b06      	cmp	r3, #6
 8001202:	d82e      	bhi.n	8001262 <GPIO_u8SetPinValue+0x7a>
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	2b0f      	cmp	r3, #15
 8001208:	d82b      	bhi.n	8001262 <GPIO_u8SetPinValue+0x7a>
	{
		if(PinVal == PIN_LOW)
 800120a:	797b      	ldrb	r3, [r7, #5]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d111      	bne.n	8001234 <GPIO_u8SetPinValue+0x4c>
		{
			GPIOx[Port]->GPIOx_ODR &=~ (CLEAR_BIT_VAL<<PinNum); /*CLEAR*/
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <GPIO_u8SetPinValue+0x8c>)
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	68da      	ldr	r2, [r3, #12]
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	4618      	mov	r0, r3
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4912      	ldr	r1, [pc, #72]	; (8001274 <GPIO_u8SetPinValue+0x8c>)
 800122a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800122e:	4002      	ands	r2, r0
 8001230:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 8001232:	e018      	b.n	8001266 <GPIO_u8SetPinValue+0x7e>
		}
		else if(PinVal == PIN_HIGH)
 8001234:	797b      	ldrb	r3, [r7, #5]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d110      	bne.n	800125c <GPIO_u8SetPinValue+0x74>
		{
			GPIOx[Port]->GPIOx_ODR |= (SET_BIT_VAL<<PinNum);	/*SET*/
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4a0d      	ldr	r2, [pc, #52]	; (8001274 <GPIO_u8SetPinValue+0x8c>)
 800123e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2101      	movs	r1, #1
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	4618      	mov	r0, r3
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4908      	ldr	r1, [pc, #32]	; (8001274 <GPIO_u8SetPinValue+0x8c>)
 8001252:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001256:	4302      	orrs	r2, r0
 8001258:	60da      	str	r2, [r3, #12]
		if(PinVal == PIN_LOW)
 800125a:	e004      	b.n	8001266 <GPIO_u8SetPinValue+0x7e>
		}
		else
		{
			Local_ErrorState=NOK;
 800125c:	2301      	movs	r3, #1
 800125e:	73fb      	strb	r3, [r7, #15]
		if(PinVal == PIN_LOW)
 8001260:	e001      	b.n	8001266 <GPIO_u8SetPinValue+0x7e>
		}
	}
	else
	{
		Local_ErrorState=NOK;
 8001262:	2301      	movs	r3, #1
 8001264:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 8001266:	7bfb      	ldrb	r3, [r7, #15]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000004 	.word	0x20000004

08001278 <GPIO_u8ReadPinValue>:
 * @param[out] PinVal
 * @retval Local_u8ErrorState
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 */
uint8_t GPIO_u8ReadPinValue(Port_t	Port , Pin_t	PinNum , PinVal_t*	PinVal)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	603a      	str	r2, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
 8001284:	460b      	mov	r3, r1
 8001286:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_ErrorState=OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

	if((Port<=PORTG) && (PinNum<=PIN15))
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b06      	cmp	r3, #6
 8001290:	d811      	bhi.n	80012b6 <GPIO_u8ReadPinValue+0x3e>
 8001292:	79bb      	ldrb	r3, [r7, #6]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80e      	bhi.n	80012b6 <GPIO_u8ReadPinValue+0x3e>
	{

		*PinVal = (((GPIOx[Port]->GPIOx_IDR)>>PinNum)&GET_BIT_VAL);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <GPIO_u8ReadPinValue+0x50>)
 800129c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	79bb      	ldrb	r3, [r7, #6]
 80012a4:	fa22 f303 	lsr.w	r3, r2, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e001      	b.n	80012ba <GPIO_u8ReadPinValue+0x42>

	}
	else
	{
		Local_ErrorState = NOK;
 80012b6:	2301      	movs	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
	}

	return Local_ErrorState;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000004 	.word	0x20000004

080012cc <GPT_u8InitPwmChannel>:

/*******************************************************************************
 * Function Name:		GPT_u8InitPwmChannel
 ********************************************************************************/
uint8_t GPT_u8InitPwmChannel(uint8_t Copy_u8TimerNumber , uint8_t Copy_u8PwmChannel)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	460a      	mov	r2, r1
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	4613      	mov	r3, r2
 80012da:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

	if(Copy_u8TimerNumber >= 2 && Copy_u8TimerNumber <= 4)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	f240 813e 	bls.w	8001564 <GPT_u8InitPwmChannel+0x298>
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	f200 813a 	bhi.w	8001564 <GPT_u8InitPwmChannel+0x298>
	{
		Copy_u8TimerNumber -= 2;
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	3b02      	subs	r3, #2
 80012f4:	71fb      	strb	r3, [r7, #7]
		switch(Copy_u8PwmChannel)
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	f200 812f 	bhi.w	800155c <GPT_u8InitPwmChannel+0x290>
 80012fe:	a201      	add	r2, pc, #4	; (adr r2, 8001304 <GPT_u8InitPwmChannel+0x38>)
 8001300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001304:	08001315 	.word	0x08001315
 8001308:	080013a7 	.word	0x080013a7
 800130c:	08001439 	.word	0x08001439
 8001310:	080014cb 	.word	0x080014cb
		{
		case GPT_u8_PWM_CHANNEL1:
			GPT_Astr[Copy_u8TimerNumber]->CCMR1 &= ~(0b11); /* Channel is output compare */
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	4a97      	ldr	r2, [pc, #604]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	4994      	ldr	r1, [pc, #592]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001322:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001326:	f022 0203 	bic.w	r2, r2, #3
 800132a:	619a      	str	r2, [r3, #24]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR1,3); /* Output compare preload enable */
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4a91      	ldr	r2, [pc, #580]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001334:	699a      	ldr	r2, [r3, #24]
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	498e      	ldr	r1, [pc, #568]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800133a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800133e:	f042 0208 	orr.w	r2, r2, #8
 8001342:	619a      	str	r2, [r3, #24]
			GPT_Astr[Copy_u8TimerNumber]->CCMR1 |= (0b11 << 5); /* PWM mode 1 */
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	4a8b      	ldr	r2, [pc, #556]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	699a      	ldr	r2, [r3, #24]
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	4988      	ldr	r1, [pc, #544]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001356:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800135a:	619a      	str	r2, [r3, #24]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR1,4); /* PWM mode 1 */
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	4a85      	ldr	r2, [pc, #532]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	4982      	ldr	r1, [pc, #520]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800136a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800136e:	f022 0210 	bic.w	r2, r2, #16
 8001372:	619a      	str	r2, [r3, #24]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,1); /* high output polarity */
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	4a7f      	ldr	r2, [pc, #508]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800137c:	6a1a      	ldr	r2, [r3, #32]
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	497c      	ldr	r1, [pc, #496]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001382:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001386:	f022 0202 	bic.w	r2, r2, #2
 800138a:	621a      	str	r2, [r3, #32]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,0); /* Output enable */
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4a79      	ldr	r2, [pc, #484]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001394:	6a1a      	ldr	r2, [r3, #32]
 8001396:	79fb      	ldrb	r3, [r7, #7]
 8001398:	4976      	ldr	r1, [pc, #472]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800139a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800139e:	f042 0201 	orr.w	r2, r2, #1
 80013a2:	621a      	str	r2, [r3, #32]
			break;
 80013a4:	e0dd      	b.n	8001562 <GPT_u8InitPwmChannel+0x296>

		case GPT_u8_PWM_CHANNEL2:
			GPT_Astr[Copy_u8TimerNumber]->CCMR1 &= ~(0b11<<8);
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a72      	ldr	r2, [pc, #456]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4970      	ldr	r1, [pc, #448]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013bc:	619a      	str	r2, [r3, #24]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR1,11);
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	4a6c      	ldr	r2, [pc, #432]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	79fb      	ldrb	r3, [r7, #7]
 80013ca:	496a      	ldr	r1, [pc, #424]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013d4:	619a      	str	r2, [r3, #24]
			GPT_Astr[Copy_u8TimerNumber]->CCMR1 |= (0b11 << 13);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	4a66      	ldr	r2, [pc, #408]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013de:	699a      	ldr	r2, [r3, #24]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	4964      	ldr	r1, [pc, #400]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013e8:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 80013ec:	619a      	str	r2, [r3, #24]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR1,12);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4a60      	ldr	r2, [pc, #384]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	699a      	ldr	r2, [r3, #24]
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	495e      	ldr	r1, [pc, #376]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80013fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001400:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001404:	619a      	str	r2, [r3, #24]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,5);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	4a5a      	ldr	r2, [pc, #360]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800140a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140e:	6a1a      	ldr	r2, [r3, #32]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4958      	ldr	r1, [pc, #352]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001414:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001418:	f022 0220 	bic.w	r2, r2, #32
 800141c:	621a      	str	r2, [r3, #32]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,4);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	4a54      	ldr	r2, [pc, #336]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001426:	6a1a      	ldr	r2, [r3, #32]
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	4952      	ldr	r1, [pc, #328]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800142c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001430:	f042 0210 	orr.w	r2, r2, #16
 8001434:	621a      	str	r2, [r3, #32]
			break;
 8001436:	e094      	b.n	8001562 <GPT_u8InitPwmChannel+0x296>

		case GPT_u8_PWM_CHANNEL3:
			GPT_Astr[Copy_u8TimerNumber]->CCMR2 &= ~(0b11);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a4e      	ldr	r2, [pc, #312]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	494b      	ldr	r1, [pc, #300]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800144a:	f022 0203 	bic.w	r2, r2, #3
 800144e:	61da      	str	r2, [r3, #28]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR2,3);
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	4a48      	ldr	r2, [pc, #288]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4945      	ldr	r1, [pc, #276]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800145e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001462:	f042 0208 	orr.w	r2, r2, #8
 8001466:	61da      	str	r2, [r3, #28]
			GPT_Astr[Copy_u8TimerNumber]->CCMR2 |= (0b11 << 5);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4a42      	ldr	r2, [pc, #264]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	493f      	ldr	r1, [pc, #252]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001476:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800147a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800147e:	61da      	str	r2, [r3, #28]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR2,4);
 8001480:	79fb      	ldrb	r3, [r7, #7]
 8001482:	4a3c      	ldr	r2, [pc, #240]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001488:	69da      	ldr	r2, [r3, #28]
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	4939      	ldr	r1, [pc, #228]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800148e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001492:	f022 0210 	bic.w	r2, r2, #16
 8001496:	61da      	str	r2, [r3, #28]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,9);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4a36      	ldr	r2, [pc, #216]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a0:	6a1a      	ldr	r2, [r3, #32]
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	4933      	ldr	r1, [pc, #204]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014ae:	621a      	str	r2, [r3, #32]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,8);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	4a30      	ldr	r2, [pc, #192]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014b8:	6a1a      	ldr	r2, [r3, #32]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	492d      	ldr	r1, [pc, #180]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014c6:	621a      	str	r2, [r3, #32]
			break;
 80014c8:	e04b      	b.n	8001562 <GPT_u8InitPwmChannel+0x296>

		case GPT_u8_PWM_CHANNEL4:
			GPT_Astr[Copy_u8TimerNumber]->CCMR2 &= ~(0b11<<8);
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a29      	ldr	r2, [pc, #164]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	4927      	ldr	r1, [pc, #156]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80014e0:	61da      	str	r2, [r3, #28]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR2,11);
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	4a23      	ldr	r2, [pc, #140]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4921      	ldr	r1, [pc, #132]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014f8:	61da      	str	r2, [r3, #28]
			GPT_Astr[Copy_u8TimerNumber]->CCMR2 |= (0b11 << 13);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a1d      	ldr	r2, [pc, #116]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	69da      	ldr	r2, [r3, #28]
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001508:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800150c:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001510:	61da      	str	r2, [r3, #28]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCMR2,12);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4a17      	ldr	r2, [pc, #92]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151a:	69da      	ldr	r2, [r3, #28]
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4915      	ldr	r1, [pc, #84]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001520:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001524:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001528:	61da      	str	r2, [r3, #28]
			CLR_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,13);
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 800152e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	490f      	ldr	r1, [pc, #60]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001538:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800153c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001540:	621a      	str	r2, [r3, #32]
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CCER,12);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154a:	6a1a      	ldr	r2, [r3, #32]
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4909      	ldr	r1, [pc, #36]	; (8001574 <GPT_u8InitPwmChannel+0x2a8>)
 8001550:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001558:	621a      	str	r2, [r3, #32]
			break;
 800155a:	e002      	b.n	8001562 <GPT_u8InitPwmChannel+0x296>

		default:
			Local_u8ErrorState = NOK;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
			break;
 8001560:	bf00      	nop
		switch(Copy_u8PwmChannel)
 8001562:	e001      	b.n	8001568 <GPT_u8InitPwmChannel+0x29c>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8001568:	7bfb      	ldrb	r3, [r7, #15]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bc80      	pop	{r7}
 8001572:	4770      	bx	lr
 8001574:	20000020 	.word	0x20000020

08001578 <GPT_u8SetPWM>:

/*******************************************************************************
 * Function Name:		GPT_u8SetPWM
 ********************************************************************************/
uint8_t GPT_u8SetPWM(uint8_t Copy_u8TimerNumber , uint8_t Copy_u8PwmChannel , uint8_t Copy_u8PwmFrequency , float Copy_u8PwmDutyCycle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
 8001584:	460b      	mov	r3, r1
 8001586:	71bb      	strb	r3, [r7, #6]
 8001588:	4613      	mov	r3, r2
 800158a:	717b      	strb	r3, [r7, #5]
	uint8_t Local_u8ErrorState = OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
	uint16_t Local_u16ReloadValue;
	uint16_t Local_u16CompareValue;

	if(Copy_u8PwmDutyCycle >= 0 && Copy_u8PwmDutyCycle <= 100 && Copy_u8TimerNumber >= 2 && Copy_u8TimerNumber <= 4)
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff fbb1 	bl	8000cfc <__aeabi_fcmpge>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 80e7 	beq.w	8001770 <GPT_u8SetPWM+0x1f8>
 80015a2:	4977      	ldr	r1, [pc, #476]	; (8001780 <GPT_u8SetPWM+0x208>)
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff fb9f 	bl	8000ce8 <__aeabi_fcmple>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 80df 	beq.w	8001770 <GPT_u8SetPWM+0x1f8>
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	f240 80db 	bls.w	8001770 <GPT_u8SetPWM+0x1f8>
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2b04      	cmp	r3, #4
 80015be:	f200 80d7 	bhi.w	8001770 <GPT_u8SetPWM+0x1f8>
	{
		Copy_u8TimerNumber -= 2;
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	3b02      	subs	r3, #2
 80015c6:	71fb      	strb	r3, [r7, #7]
		switch(Copy_u8PwmChannel)
 80015c8:	79bb      	ldrb	r3, [r7, #6]
 80015ca:	2b03      	cmp	r3, #3
 80015cc:	f200 80cc 	bhi.w	8001768 <GPT_u8SetPWM+0x1f0>
 80015d0:	a201      	add	r2, pc, #4	; (adr r2, 80015d8 <GPT_u8SetPWM+0x60>)
 80015d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d6:	bf00      	nop
 80015d8:	080015e9 	.word	0x080015e9
 80015dc:	08001649 	.word	0x08001649
 80015e0:	080016a9 	.word	0x080016a9
 80015e4:	08001709 	.word	0x08001709
		{
		case GPT_u8_PWM_CHANNEL1:
			//Local_u16ReloadValue = ((F_CPU/(GPT_Astr[Copy_u8TimerNumber]->PSC+1))/Copy_u8PwmFrequency);
			Local_u16ReloadValue=65535;
 80015e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ec:	81bb      	strh	r3, [r7, #12]

			Local_u16CompareValue = ((Copy_u8PwmDutyCycle*Local_u16ReloadValue)/100) ;
 80015ee:	89bb      	ldrh	r3, [r7, #12]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f97d 	bl	80008f0 <__aeabi_i2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	6839      	ldr	r1, [r7, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff f9cc 	bl	8000998 <__aeabi_fmul>
 8001600:	4603      	mov	r3, r0
 8001602:	495f      	ldr	r1, [pc, #380]	; (8001780 <GPT_u8SetPWM+0x208>)
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fa7b 	bl	8000b00 <__aeabi_fdiv>
 800160a:	4603      	mov	r3, r0
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fb89 	bl	8000d24 <__aeabi_f2uiz>
 8001612:	4603      	mov	r3, r0
 8001614:	817b      	strh	r3, [r7, #10]
			GPT_Astr[Copy_u8TimerNumber]->ARR = Local_u16ReloadValue ; /* Setup Frequency */
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4a5a      	ldr	r2, [pc, #360]	; (8001784 <GPT_u8SetPWM+0x20c>)
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	89ba      	ldrh	r2, [r7, #12]
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
			GPT_Astr[Copy_u8TimerNumber]->CCR1 = Local_u16CompareValue; /* Setup Duty Cycle */
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4a57      	ldr	r2, [pc, #348]	; (8001784 <GPT_u8SetPWM+0x20c>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	897a      	ldrh	r2, [r7, #10]
 800162c:	635a      	str	r2, [r3, #52]	; 0x34
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CR1,0); /* Enable the timer */
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	4a54      	ldr	r2, [pc, #336]	; (8001784 <GPT_u8SetPWM+0x20c>)
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4952      	ldr	r1, [pc, #328]	; (8001784 <GPT_u8SetPWM+0x20c>)
 800163c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001640:	f042 0201 	orr.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]
			break;
 8001646:	e092      	b.n	800176e <GPT_u8SetPWM+0x1f6>

		case GPT_u8_PWM_CHANNEL2:
			//Local_u16ReloadValue = ((F_CPU/(GPT_Astr[Copy_u8TimerNumber]->PSC+1))/Copy_u8PwmFrequency);
			Local_u16ReloadValue=65535;
 8001648:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164c:	81bb      	strh	r3, [r7, #12]

			Local_u16CompareValue = ((Copy_u8PwmDutyCycle*Local_u16ReloadValue)/100) ;
 800164e:	89bb      	ldrh	r3, [r7, #12]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff f94d 	bl	80008f0 <__aeabi_i2f>
 8001656:	4603      	mov	r3, r0
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff f99c 	bl	8000998 <__aeabi_fmul>
 8001660:	4603      	mov	r3, r0
 8001662:	4947      	ldr	r1, [pc, #284]	; (8001780 <GPT_u8SetPWM+0x208>)
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fa4b 	bl	8000b00 <__aeabi_fdiv>
 800166a:	4603      	mov	r3, r0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb59 	bl	8000d24 <__aeabi_f2uiz>
 8001672:	4603      	mov	r3, r0
 8001674:	817b      	strh	r3, [r7, #10]

			GPT_Astr[Copy_u8TimerNumber]->ARR = Local_u16ReloadValue ; /* Setup Frequency */
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4a42      	ldr	r2, [pc, #264]	; (8001784 <GPT_u8SetPWM+0x20c>)
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	89ba      	ldrh	r2, [r7, #12]
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
			GPT_Astr[Copy_u8TimerNumber]->CCR2 = Local_u16CompareValue; /* Setup Duty Cycle */
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <GPT_u8SetPWM+0x20c>)
 8001686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168a:	897a      	ldrh	r2, [r7, #10]
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CR1,0); /* Enable the timer */
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	4a3c      	ldr	r2, [pc, #240]	; (8001784 <GPT_u8SetPWM+0x20c>)
 8001692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	493a      	ldr	r1, [pc, #232]	; (8001784 <GPT_u8SetPWM+0x20c>)
 800169c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016a0:	f042 0201 	orr.w	r2, r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
			break;
 80016a6:	e062      	b.n	800176e <GPT_u8SetPWM+0x1f6>

		case GPT_u8_PWM_CHANNEL3:
			//	Local_u16ReloadValue = ((F_CPU/(GPT_Astr[Copy_u8TimerNumber]->PSC+1))/Copy_u8PwmFrequency);
			Local_u16ReloadValue=65535;
 80016a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ac:	81bb      	strh	r3, [r7, #12]
			Local_u16CompareValue = ((Copy_u8PwmDutyCycle*Local_u16ReloadValue)/100) ;
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff f91d 	bl	80008f0 <__aeabi_i2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	6839      	ldr	r1, [r7, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff f96c 	bl	8000998 <__aeabi_fmul>
 80016c0:	4603      	mov	r3, r0
 80016c2:	492f      	ldr	r1, [pc, #188]	; (8001780 <GPT_u8SetPWM+0x208>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fa1b 	bl	8000b00 <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fb29 	bl	8000d24 <__aeabi_f2uiz>
 80016d2:	4603      	mov	r3, r0
 80016d4:	817b      	strh	r3, [r7, #10]
			GPT_Astr[Copy_u8TimerNumber]->ARR = Local_u16ReloadValue ; /* Setup Frequency */
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4a2a      	ldr	r2, [pc, #168]	; (8001784 <GPT_u8SetPWM+0x20c>)
 80016da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016de:	89ba      	ldrh	r2, [r7, #12]
 80016e0:	62da      	str	r2, [r3, #44]	; 0x2c
			GPT_Astr[Copy_u8TimerNumber]->CCR3 = Local_u16CompareValue; /* Setup Duty Cycle */
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	4a27      	ldr	r2, [pc, #156]	; (8001784 <GPT_u8SetPWM+0x20c>)
 80016e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ea:	897a      	ldrh	r2, [r7, #10]
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CR1,0); /* Enable the timer */
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4a24      	ldr	r2, [pc, #144]	; (8001784 <GPT_u8SetPWM+0x20c>)
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	4922      	ldr	r1, [pc, #136]	; (8001784 <GPT_u8SetPWM+0x20c>)
 80016fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	601a      	str	r2, [r3, #0]
			break;
 8001706:	e032      	b.n	800176e <GPT_u8SetPWM+0x1f6>

		case GPT_u8_PWM_CHANNEL4:
			//	Local_u16ReloadValue = ((F_CPU/(GPT_Astr[Copy_u8TimerNumber]->PSC+1))/Copy_u8PwmFrequency);
			Local_u16ReloadValue=65535;
 8001708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800170c:	81bb      	strh	r3, [r7, #12]
			Local_u16CompareValue = ((Copy_u8PwmDutyCycle*Local_u16ReloadValue)/100) ;
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff f8ed 	bl	80008f0 <__aeabi_i2f>
 8001716:	4603      	mov	r3, r0
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f93c 	bl	8000998 <__aeabi_fmul>
 8001720:	4603      	mov	r3, r0
 8001722:	4917      	ldr	r1, [pc, #92]	; (8001780 <GPT_u8SetPWM+0x208>)
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff f9eb 	bl	8000b00 <__aeabi_fdiv>
 800172a:	4603      	mov	r3, r0
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff faf9 	bl	8000d24 <__aeabi_f2uiz>
 8001732:	4603      	mov	r3, r0
 8001734:	817b      	strh	r3, [r7, #10]
			GPT_Astr[Copy_u8TimerNumber]->ARR = Local_u16ReloadValue ; /* Setup Frequency */
 8001736:	79fb      	ldrb	r3, [r7, #7]
 8001738:	4a12      	ldr	r2, [pc, #72]	; (8001784 <GPT_u8SetPWM+0x20c>)
 800173a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800173e:	89ba      	ldrh	r2, [r7, #12]
 8001740:	62da      	str	r2, [r3, #44]	; 0x2c
			GPT_Astr[Copy_u8TimerNumber]->CCR4 = Local_u16CompareValue; /* Setup Duty Cycle */
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	4a0f      	ldr	r2, [pc, #60]	; (8001784 <GPT_u8SetPWM+0x20c>)
 8001746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800174a:	897a      	ldrh	r2, [r7, #10]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
			SET_BIT(GPT_Astr[Copy_u8TimerNumber]->CR1,0); /* Enable the timer */
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <GPT_u8SetPWM+0x20c>)
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	490a      	ldr	r1, [pc, #40]	; (8001784 <GPT_u8SetPWM+0x20c>)
 800175c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	601a      	str	r2, [r3, #0]
			break;
 8001766:	e002      	b.n	800176e <GPT_u8SetPWM+0x1f6>
		default:
			Local_u8ErrorState = NOK;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
			break;
 800176c:	bf00      	nop
		switch(Copy_u8PwmChannel)
 800176e:	e001      	b.n	8001774 <GPT_u8SetPWM+0x1fc>
		}

	}
	else
	{
		Local_u8ErrorState = NOK;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8001774:	7bfb      	ldrb	r3, [r7, #15]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	42c80000 	.word	0x42c80000
 8001784:	20000020 	.word	0x20000020

08001788 <TIM2_IRQHandler>:
}
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
void TIM2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	if(Global_pfArr[0] != NULL)
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <TIM2_IRQHandler+0x28>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <TIM2_IRQHandler+0x12>
	{
		Global_pfArr[0]();
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <TIM2_IRQHandler+0x28>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4798      	blx	r3
	}
	CLR_BIT(TIMER2->SR,0); /* Clear the update flag */
 800179a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6113      	str	r3, [r2, #16]
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000068 	.word	0x20000068

080017b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	if(Global_pfArr[1] != NULL)
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <TIM3_IRQHandler+0x24>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <TIM3_IRQHandler+0x12>
	{
		Global_pfArr[1]();
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <TIM3_IRQHandler+0x24>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4798      	blx	r3
	}
	CLR_BIT(TIMER3->SR,0); /* Clear the update flag */
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <TIM3_IRQHandler+0x28>)
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <TIM3_IRQHandler+0x28>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6113      	str	r3, [r2, #16]
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000068 	.word	0x20000068
 80017dc:	40000400 	.word	0x40000400

080017e0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	if(Global_pfArr[2] != NULL)
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <TIM4_IRQHandler+0x24>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <TIM4_IRQHandler+0x12>
	{
		Global_pfArr[2]();
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <TIM4_IRQHandler+0x24>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4798      	blx	r3
	}
	CLR_BIT(TIMER4->SR,0); /* Clear the update flag */
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <TIM4_IRQHandler+0x28>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <TIM4_IRQHandler+0x28>)
 80017f8:	f023 0301 	bic.w	r3, r3, #1
 80017fc:	6113      	str	r3, [r2, #16]
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000068 	.word	0x20000068
 8001808:	40000800 	.word	0x40000800

0800180c <Motors_Init>:
 * \Return value:   : void
 *******************************************************************************/


void Motors_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	GPIO_u8PinInit(&motor_in1_PinConfig);
 8001810:	480e      	ldr	r0, [pc, #56]	; (800184c <Motors_Init+0x40>)
 8001812:	f7ff fb79 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&motor_in2_PinConfig);
 8001816:	480e      	ldr	r0, [pc, #56]	; (8001850 <Motors_Init+0x44>)
 8001818:	f7ff fb76 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&motor_in3_PinConfig);
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <Motors_Init+0x48>)
 800181e:	f7ff fb73 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&motor_in4_PinConfig);
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <Motors_Init+0x4c>)
 8001824:	f7ff fb70 	bl	8000f08 <GPIO_u8PinInit>

	GPIO_u8PinInit(&motorA_pwm_PinConfig);
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <Motors_Init+0x50>)
 800182a:	f7ff fb6d 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&motorB_pwm_PinConfig);
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <Motors_Init+0x54>)
 8001830:	f7ff fb6a 	bl	8000f08 <GPIO_u8PinInit>

	GPT_u8InitPwmChannel(MOTORA_TIMER, MOTORA_TIMER_CC);
 8001834:	2100      	movs	r1, #0
 8001836:	2004      	movs	r0, #4
 8001838:	f7ff fd48 	bl	80012cc <GPT_u8InitPwmChannel>
	GPT_u8InitPwmChannel(MOTORB_TIMER, MOTORB_TIMER_CC);
 800183c:	2101      	movs	r1, #1
 800183e:	2004      	movs	r0, #4
 8001840:	f7ff fd44 	bl	80012cc <GPT_u8InitPwmChannel>

	MOTORS_Stop();
 8001844:	f000 f885 	bl	8001952 <MOTORS_Stop>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	08002818 	.word	0x08002818
 8001850:	08002820 	.word	0x08002820
 8001854:	08002828 	.word	0x08002828
 8001858:	08002830 	.word	0x08002830
 800185c:	08002808 	.word	0x08002808
 8001860:	08002810 	.word	0x08002810

08001864 <MOTORS_Forward>:



void MOTORS_Forward(uint8_t speed)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
	Motor1_Forward();
 800186e:	f000 f878 	bl	8001962 <Motor1_Forward>
	Motor2_Forward();
 8001872:	f000 f884 	bl	800197e <Motor2_Forward>
	Motors_Speed(speed);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	4618      	mov	r0, r3
 800187a:	f000 f815 	bl	80018a8 <Motors_Speed>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <MOTORS_Backward>:


void MOTORS_Backward(uint8_t speed)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	71fb      	strb	r3, [r7, #7]
	Motor1_Back();
 8001890:	f000 f883 	bl	800199a <Motor1_Back>
	Motor2_Back();
 8001894:	f000 f88f 	bl	80019b6 <Motor2_Back>
	Motors_Speed(speed);
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f804 	bl	80018a8 <Motors_Speed>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <Motors_Speed>:

void Motors_Speed(uint8_t speed)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
	Motor1_Speed(speed);
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f000 f8a8 	bl	8001a0a <Motor1_Speed>
	Motor2_Speed(speed);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 f8b7 	bl	8001a30 <Motor2_Speed>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <MOTORS_Forward_Left>:

void MOTORS_Forward_Left(uint8_t speed)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	4603      	mov	r3, r0
 80018d2:	71fb      	strb	r3, [r7, #7]
	Motor2_Stop();
 80018d4:	f000 f88b 	bl	80019ee <Motor2_Stop>
	Motor1_Forward();
 80018d8:	f000 f843 	bl	8001962 <Motor1_Forward>
	Motor1_Speed(speed);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f893 	bl	8001a0a <Motor1_Speed>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <MOTORS_Forward_Right>:

void MOTORS_Forward_Right(uint8_t speed)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	Motor1_Stop();
 80018f6:	f000 f86c 	bl	80019d2 <Motor1_Stop>
	Motor2_Forward();
 80018fa:	f000 f840 	bl	800197e <Motor2_Forward>
	Motor2_Speed(speed);
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f895 	bl	8001a30 <Motor2_Speed>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <MOTORS_Backward_Right>:


void MOTORS_Backward_Right(uint8_t speed)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	b082      	sub	sp, #8
 8001912:	af00      	add	r7, sp, #0
 8001914:	4603      	mov	r3, r0
 8001916:	71fb      	strb	r3, [r7, #7]
	Motor1_Stop();
 8001918:	f000 f85b 	bl	80019d2 <Motor1_Stop>
	Motor2_Back();
 800191c:	f000 f84b 	bl	80019b6 <Motor2_Back>
	Motor2_Speed(speed);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f884 	bl	8001a30 <Motor2_Speed>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <MOTORS_Backward_Left>:

void MOTORS_Backward_Left(uint8_t speed)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
	Motor1_Back();
 800193a:	f000 f82e 	bl	800199a <Motor1_Back>
	Motor2_Stop();
 800193e:	f000 f856 	bl	80019ee <Motor2_Stop>
	Motor1_Speed(speed);
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f000 f860 	bl	8001a0a <Motor1_Speed>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <MOTORS_Stop>:

void MOTORS_Stop(void)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	af00      	add	r7, sp, #0
	Motor1_Stop();
 8001956:	f000 f83c 	bl	80019d2 <Motor1_Stop>
	Motor2_Stop();
 800195a:	f000 f848 	bl	80019ee <Motor2_Stop>
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}

08001962 <Motor1_Forward>:


void Motor1_Forward(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(MOTORA_PORT, MOTORDRIVER_IN1, PIN_HIGH);
 8001966:	2201      	movs	r2, #1
 8001968:	2100      	movs	r1, #0
 800196a:	2000      	movs	r0, #0
 800196c:	f7ff fc3c 	bl	80011e8 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(MOTORA_PORT, MOTORDRIVER_IN2, PIN_LOW);
 8001970:	2200      	movs	r2, #0
 8001972:	210c      	movs	r1, #12
 8001974:	2000      	movs	r0, #0
 8001976:	f7ff fc37 	bl	80011e8 <GPIO_u8SetPinValue>
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}

0800197e <Motor2_Forward>:

void Motor2_Forward(void)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(MOTORB_PORT, MOTORDRIVER_IN3, PIN_HIGH);
 8001982:	2201      	movs	r2, #1
 8001984:	2103      	movs	r1, #3
 8001986:	2000      	movs	r0, #0
 8001988:	f7ff fc2e 	bl	80011e8 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(MOTORB_PORT, MOTORDRIVER_IN4, PIN_LOW);
 800198c:	2200      	movs	r2, #0
 800198e:	2104      	movs	r1, #4
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fc29 	bl	80011e8 <GPIO_u8SetPinValue>
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}

0800199a <Motor1_Back>:

void Motor1_Back(void)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(MOTORA_PORT, MOTORDRIVER_IN1, PIN_LOW);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2000      	movs	r0, #0
 80019a4:	f7ff fc20 	bl	80011e8 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(MOTORA_PORT, MOTORDRIVER_IN2, PIN_HIGH);
 80019a8:	2201      	movs	r2, #1
 80019aa:	210c      	movs	r1, #12
 80019ac:	2000      	movs	r0, #0
 80019ae:	f7ff fc1b 	bl	80011e8 <GPIO_u8SetPinValue>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <Motor2_Back>:

void Motor2_Back(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(MOTORB_PORT, MOTORDRIVER_IN3, PIN_LOW);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2103      	movs	r1, #3
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff fc12 	bl	80011e8 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(MOTORB_PORT, MOTORDRIVER_IN4, PIN_HIGH);
 80019c4:	2201      	movs	r2, #1
 80019c6:	2104      	movs	r1, #4
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff fc0d 	bl	80011e8 <GPIO_u8SetPinValue>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <Motor1_Stop>:

void Motor1_Stop(void)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(MOTORA_PORT, MOTORDRIVER_IN1, PIN_HIGH);
 80019d6:	2201      	movs	r2, #1
 80019d8:	2100      	movs	r1, #0
 80019da:	2000      	movs	r0, #0
 80019dc:	f7ff fc04 	bl	80011e8 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(MOTORA_PORT, MOTORDRIVER_IN2, PIN_HIGH);
 80019e0:	2201      	movs	r2, #1
 80019e2:	210c      	movs	r1, #12
 80019e4:	2000      	movs	r0, #0
 80019e6:	f7ff fbff 	bl	80011e8 <GPIO_u8SetPinValue>
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}

080019ee <Motor2_Stop>:

void Motor2_Stop(void)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	af00      	add	r7, sp, #0
	GPIO_u8SetPinValue(MOTORB_PORT, MOTORDRIVER_IN3, PIN_HIGH);
 80019f2:	2201      	movs	r2, #1
 80019f4:	2103      	movs	r1, #3
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff fbf6 	bl	80011e8 <GPIO_u8SetPinValue>
	GPIO_u8SetPinValue(MOTORB_PORT, MOTORDRIVER_IN4, PIN_HIGH);
 80019fc:	2201      	movs	r2, #1
 80019fe:	2104      	movs	r1, #4
 8001a00:	2000      	movs	r0, #0
 8001a02:	f7ff fbf1 	bl	80011e8 <GPIO_u8SetPinValue>
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <Motor1_Speed>:

void Motor1_Speed(uint8_t speed)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
	GPT_u8SetPWM(MOTORA_TIMER, MOTORA_TIMER_CC, 50, speed);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe ff66 	bl	80008e8 <__aeabi_ui2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2232      	movs	r2, #50	; 0x32
 8001a20:	2100      	movs	r1, #0
 8001a22:	2004      	movs	r0, #4
 8001a24:	f7ff fda8 	bl	8001578 <GPT_u8SetPWM>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <Motor2_Speed>:

void Motor2_Speed(uint8_t speed)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
	GPT_u8SetPWM(MOTORB_TIMER, MOTORB_TIMER_CC, 50, speed);
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe ff53 	bl	80008e8 <__aeabi_ui2f>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2232      	movs	r2, #50	; 0x32
 8001a46:	2101      	movs	r1, #1
 8001a48:	2004      	movs	r0, #4
 8001a4a:	f7ff fd95 	bl	8001578 <GPT_u8SetPWM>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <NVIC_EnableIRQ>:
#include "NVIC_interface.h"



uint8_t NVIC_EnableIRQ(NVIC_IREQn_t IREQ_NUM)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_u8RegNum;
	uint8_t Local_u8BitNum;

	if(IREQ_NUM <= NVIC_IRQ_FMPI2C1_Error)
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	2b44      	cmp	r3, #68	; 0x44
 8001a6a:	d80f      	bhi.n	8001a8c <NVIC_EnableIRQ+0x34>
	{

		/*calculate Register number*/
		Local_u8RegNum = (IREQ_NUM/32);
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	095b      	lsrs	r3, r3, #5
 8001a70:	73bb      	strb	r3, [r7, #14]

		/*calculate Bit number*/
		Local_u8BitNum = (IREQ_NUM%32);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 031f 	and.w	r3, r3, #31
 8001a78:	737b      	strb	r3, [r7, #13]

		/*Enable interrupt*/
		NVIC -> ISER[Local_u8RegNum] = (1 << Local_u8BitNum);
 8001a7a:	7b7b      	ldrb	r3, [r7, #13]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	fa02 f103 	lsl.w	r1, r2, r3
 8001a82:	4a06      	ldr	r2, [pc, #24]	; (8001a9c <NVIC_EnableIRQ+0x44>)
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001a8a:	e001      	b.n	8001a90 <NVIC_EnableIRQ+0x38>
	}
	else
	{
		Local_u8ErrorState = NOK;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <NVIC_SetPendingFlag>:
	}
	return Local_u8ErrorState;
}

uint8_t NVIC_SetPendingFlag(NVIC_IREQn_t IREQ_NUM)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8ErrorState = OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	73fb      	strb	r3, [r7, #15]
	uint8_t Local_u8RegNum;
	uint8_t Local_u8BitNum;

	if(IREQ_NUM <= NVIC_IRQ_FMPI2C1_Error)
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b44      	cmp	r3, #68	; 0x44
 8001ab2:	d810      	bhi.n	8001ad6 <NVIC_SetPendingFlag+0x36>
	{
		/*calculate Register number*/
		Local_u8RegNum = (IREQ_NUM/32);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	095b      	lsrs	r3, r3, #5
 8001ab8:	73bb      	strb	r3, [r7, #14]

		/*calculate Bit number*/
		Local_u8BitNum = (IREQ_NUM%32);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	f003 031f 	and.w	r3, r3, #31
 8001ac0:	737b      	strb	r3, [r7, #13]

		/*changes interrupt state to pending*/
		NVIC -> ISPR[Local_u8RegNum] = (1 << Local_u8BitNum);
 8001ac2:	7b7b      	ldrb	r3, [r7, #13]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	fa02 f103 	lsl.w	r1, r2, r3
 8001aca:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <NVIC_SetPendingFlag+0x48>)
 8001acc:	7bbb      	ldrb	r3, [r7, #14]
 8001ace:	3340      	adds	r3, #64	; 0x40
 8001ad0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001ad4:	e001      	b.n	8001ada <NVIC_SetPendingFlag+0x3a>
	}
	else
	{
		Local_u8ErrorState = NOK;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bc80      	pop	{r7}
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <NVIC_SetIRQPriority>:
	}
	return Local_u8ErrorState;
}

uint8_t	NVIC_SetIRQPriority(NVIC_IREQn_t IREQ_NUM, uint8_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	460a      	mov	r2, r1
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71bb      	strb	r3, [r7, #6]
	uint8_t Local_u8ErrorState = OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	73fb      	strb	r3, [r7, #15]

	if(IREQ_NUM <= NVIC_IRQ_FMPI2C1_Error)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	2b44      	cmp	r3, #68	; 0x44
 8001b04:	d813      	bhi.n	8001b2e <NVIC_SetIRQPriority+0x42>
	{
		NVIC -> IPR[IREQ_NUM] &= ~(0xF0);
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <NVIC_SetIRQPriority+0x54>)
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	33c0      	adds	r3, #192	; 0xc0
 8001b0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b10:	490b      	ldr	r1, [pc, #44]	; (8001b40 <NVIC_SetIRQPriority+0x54>)
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b18:	33c0      	adds	r3, #192	; 0xc0
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		NVIC -> IPR[IREQ_NUM] = (priority << 4);
 8001b1e:	79bb      	ldrb	r3, [r7, #6]
 8001b20:	0119      	lsls	r1, r3, #4
 8001b22:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <NVIC_SetIRQPriority+0x54>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	33c0      	adds	r3, #192	; 0xc0
 8001b28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b2c:	e001      	b.n	8001b32 <NVIC_SetIRQPriority+0x46>
	}
	else
	{
		Local_u8ErrorState = NOK;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8ErrorState;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000e100 	.word	0xe000e100

08001b44 <BluetoothData>:


extern const PinConfig_t SERVO1_PinConfig;

void BluetoothData (void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
	//Received data from Bluetooth Module by USART
	G_u8DataFromBluetooth = USART_u8ReadDataRegister(USART3);
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f000 fb41 	bl	80021d0 <USART_u8ReadDataRegister>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b02      	ldr	r3, [pc, #8]	; (8001b5c <BluetoothData+0x18>)
 8001b54:	701a      	strb	r2, [r3, #0]


}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000090 	.word	0x20000090

08001b60 <RasberrypiData>:
void RasberrypiData (void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	//Received data from rasberry Module by USART
	G_u8DataFromRaspberrypi = USART_u8ReadDataRegister(USART1);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f000 fb33 	bl	80021d0 <USART_u8ReadDataRegister>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b02      	ldr	r3, [pc, #8]	; (8001b78 <RasberrypiData+0x18>)
 8001b70:	701a      	strb	r2, [r3, #0]

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000091 	.word	0x20000091

08001b7c <init>:

void init()
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0


	RCC_EnablePeripheral(APB2 , GPIOAEN);
 8001b80:	2102      	movs	r1, #2
 8001b82:	2002      	movs	r0, #2
 8001b84:	f000 f894 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2 , GPIOBEN);
 8001b88:	2103      	movs	r1, #3
 8001b8a:	2002      	movs	r0, #2
 8001b8c:	f000 f890 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2 , GPIOCEN);
 8001b90:	2104      	movs	r1, #4
 8001b92:	2002      	movs	r0, #2
 8001b94:	f000 f88c 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2 , GPIODEN);
 8001b98:	2105      	movs	r1, #5
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f000 f888 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2 , GPIOEEN);
 8001ba0:	2106      	movs	r1, #6
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f000 f884 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2 , GPIOFEN);
 8001ba8:	2107      	movs	r1, #7
 8001baa:	2002      	movs	r0, #2
 8001bac:	f000 f880 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2 , GPIOGEN);
 8001bb0:	2108      	movs	r1, #8
 8001bb2:	2002      	movs	r0, #2
 8001bb4:	f000 f87c 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2,TIM1EN);
 8001bb8:	210b      	movs	r1, #11
 8001bba:	2002      	movs	r0, #2
 8001bbc:	f000 f878 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB1,TIM2EN);
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f000 f874 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB1,TIM3EN);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2001      	movs	r0, #1
 8001bcc:	f000 f870 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB1,TIM4EN);
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f000 f86c 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB1,USART3EN);
 8001bd8:	2112      	movs	r1, #18
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f000 f868 	bl	8001cb0 <RCC_EnablePeripheral>
	RCC_EnablePeripheral(APB2,USART1EN);
 8001be0:	210e      	movs	r1, #14
 8001be2:	2002      	movs	r0, #2
 8001be4:	f000 f864 	bl	8001cb0 <RCC_EnablePeripheral>

	Motors_Init();
 8001be8:	f7ff fe10 	bl	800180c <Motors_Init>

	servo_init();
 8001bec:	f000 f998 	bl	8001f20 <servo_init>

	Buzzer_vInit();
 8001bf0:	f7ff f960 	bl	8000eb4 <Buzzer_vInit>

	Ultrasonic_Init();
 8001bf4:	f000 fb58 	bl	80022a8 <Ultrasonic_Init>

	GPIO_u8PinInit(&uart3_tx_PinConfig);
 8001bf8:	4825      	ldr	r0, [pc, #148]	; (8001c90 <init+0x114>)
 8001bfa:	f7ff f985 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&uart3_rx_PinConfig);
 8001bfe:	4825      	ldr	r0, [pc, #148]	; (8001c94 <init+0x118>)
 8001c00:	f7ff f982 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&uart1_tx_PinConfig);
 8001c04:	4824      	ldr	r0, [pc, #144]	; (8001c98 <init+0x11c>)
 8001c06:	f7ff f97f 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&uart1_rx_PinConfig);
 8001c0a:	4824      	ldr	r0, [pc, #144]	; (8001c9c <init+0x120>)
 8001c0c:	f7ff f97c 	bl	8000f08 <GPIO_u8PinInit>


	/****uart_initializations with interrupt****/
	USART_Init(&USART3_ConfigReg);
 8001c10:	4823      	ldr	r0, [pc, #140]	; (8001ca0 <init+0x124>)
 8001c12:	f000 f9bd 	bl	8001f90 <USART_Init>
	USART_BaudRate(&USART3_ConfigReg);
 8001c16:	4822      	ldr	r0, [pc, #136]	; (8001ca0 <init+0x124>)
 8001c18:	f000 fa3e 	bl	8002098 <USART_BaudRate>
	NVIC_SetIRQPriority(NVIC_IRQ_USART3 , 0);
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	2027      	movs	r0, #39	; 0x27
 8001c20:	f7ff ff64 	bl	8001aec <NVIC_SetIRQPriority>
	NVIC_EnableIRQ(NVIC_IRQ_USART3);
 8001c24:	2027      	movs	r0, #39	; 0x27
 8001c26:	f7ff ff17 	bl	8001a58 <NVIC_EnableIRQ>
	NVIC_SetPendingFlag(NVIC_IRQ_USART3);
 8001c2a:	2027      	movs	r0, #39	; 0x27
 8001c2c:	f7ff ff38 	bl	8001aa0 <NVIC_SetPendingFlag>
	USART_RxIT_Enable(USART3 , Enable_USART) ;
 8001c30:	2101      	movs	r1, #1
 8001c32:	2002      	movs	r0, #2
 8001c34:	f000 faa4 	bl	8002180 <USART_RxIT_Enable>
	USART_Enable(USART3,Enable_USART);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f000 fa50 	bl	80020e0 <USART_Enable>
	SYSTICK_DelayMs(300);
 8001c40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c44:	f000 f91a 	bl	8001e7c <SYSTICK_DelayMs>
	USART3_voidSetCallBack(BluetoothData);
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <init+0x128>)
 8001c4a:	f000 fae3 	bl	8002214 <USART3_voidSetCallBack>


	USART_Init(&USART1_ConfigReg);
 8001c4e:	4816      	ldr	r0, [pc, #88]	; (8001ca8 <init+0x12c>)
 8001c50:	f000 f99e 	bl	8001f90 <USART_Init>
	USART_BaudRate(&USART1_ConfigReg);
 8001c54:	4814      	ldr	r0, [pc, #80]	; (8001ca8 <init+0x12c>)
 8001c56:	f000 fa1f 	bl	8002098 <USART_BaudRate>
	NVIC_SetIRQPriority(NVIC_IRQ_USART1 , 0);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2025      	movs	r0, #37	; 0x25
 8001c5e:	f7ff ff45 	bl	8001aec <NVIC_SetIRQPriority>
	NVIC_EnableIRQ(NVIC_IRQ_USART1);
 8001c62:	2025      	movs	r0, #37	; 0x25
 8001c64:	f7ff fef8 	bl	8001a58 <NVIC_EnableIRQ>
	NVIC_SetPendingFlag(NVIC_IRQ_USART1);
 8001c68:	2025      	movs	r0, #37	; 0x25
 8001c6a:	f7ff ff19 	bl	8001aa0 <NVIC_SetPendingFlag>
	USART_RxIT_Enable(USART1 , Enable_USART) ;
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2000      	movs	r0, #0
 8001c72:	f000 fa85 	bl	8002180 <USART_RxIT_Enable>
	USART_Enable(USART1,Enable_USART);
 8001c76:	2101      	movs	r1, #1
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f000 fa31 	bl	80020e0 <USART_Enable>
	SYSTICK_DelayMs(300);
 8001c7e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001c82:	f000 f8fb 	bl	8001e7c <SYSTICK_DelayMs>
	USART1_voidSetCallBack(RasberrypiData);
 8001c86:	4809      	ldr	r0, [pc, #36]	; (8001cac <init+0x130>)
 8001c88:	f000 fab6 	bl	80021f8 <USART1_voidSetCallBack>
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	080027e0 	.word	0x080027e0
 8001c94:	080027e8 	.word	0x080027e8
 8001c98:	080027c0 	.word	0x080027c0
 8001c9c:	080027c8 	.word	0x080027c8
 8001ca0:	080027f0 	.word	0x080027f0
 8001ca4:	08001b45 	.word	0x08001b45
 8001ca8:	080027d0 	.word	0x080027d0
 8001cac:	08001b61 	.word	0x08001b61

08001cb0 <RCC_EnablePeripheral>:
#include "Stm32F103xx.h"

#include "RCC_Interface.h"

void RCC_EnablePeripheral(RCC_Bus_t bus , uint8_t peripheral)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460a      	mov	r2, r1
 8001cba:	71fb      	strb	r3, [r7, #7]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	71bb      	strb	r3, [r7, #6]
	switch (bus)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d01c      	beq.n	8001d00 <RCC_EnablePeripheral+0x50>
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	dc25      	bgt.n	8001d16 <RCC_EnablePeripheral+0x66>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <RCC_EnablePeripheral+0x24>
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d00b      	beq.n	8001cea <RCC_EnablePeripheral+0x3a>

	case APB1: SET_BIT(RCC->APB1ENR , peripheral);  break;

	case APB2: SET_BIT(RCC->APB2ENR , peripheral);  break;

	default: break;
 8001cd2:	e020      	b.n	8001d16 <RCC_EnablePeripheral+0x66>
	case AHB:  SET_BIT(RCC->AHBENR , peripheral);  break;
 8001cd4:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <RCC_EnablePeripheral+0x74>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	79ba      	ldrb	r2, [r7, #6]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4a10      	ldr	r2, [pc, #64]	; (8001d24 <RCC_EnablePeripheral+0x74>)
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	6153      	str	r3, [r2, #20]
 8001ce8:	e016      	b.n	8001d18 <RCC_EnablePeripheral+0x68>
	case APB1: SET_BIT(RCC->APB1ENR , peripheral);  break;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <RCC_EnablePeripheral+0x74>)
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	79ba      	ldrb	r2, [r7, #6]
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <RCC_EnablePeripheral+0x74>)
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	61d3      	str	r3, [r2, #28]
 8001cfe:	e00b      	b.n	8001d18 <RCC_EnablePeripheral+0x68>
	case APB2: SET_BIT(RCC->APB2ENR , peripheral);  break;
 8001d00:	4b08      	ldr	r3, [pc, #32]	; (8001d24 <RCC_EnablePeripheral+0x74>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	79ba      	ldrb	r2, [r7, #6]
 8001d06:	2101      	movs	r1, #1
 8001d08:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <RCC_EnablePeripheral+0x74>)
 8001d10:	430b      	orrs	r3, r1
 8001d12:	6193      	str	r3, [r2, #24]
 8001d14:	e000      	b.n	8001d18 <RCC_EnablePeripheral+0x68>
	default: break;
 8001d16:	bf00      	nop
	}
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000

08001d28 <SELF_PARKING>:

uint8_t PARKING_SAFE , status = 0,parking_speed=0;


void SELF_PARKING()
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
	parking_speed=PARKING_SPEED;
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <SELF_PARKING+0x13c>)
 8001d30:	2232      	movs	r2, #50	; 0x32
 8001d32:	701a      	strb	r2, [r3, #0]

	/*must be sure he is in the right position*/

	/*Back right*/

	PARKING_SAFE=1;
 8001d34:	4b4c      	ldr	r3, [pc, #304]	; (8001e68 <SELF_PARKING+0x140>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
	uint8_t x=0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	Servo_Motor_GENERATE(0);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f000 f8fc 	bl	8001f3c <Servo_Motor_GENERATE>

	while(x<MAX_ANGLE)
 8001d44:	e009      	b.n	8001d5a <SELF_PARKING+0x32>
	{
		Servo_Motor_GENERATE(x);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 f8f7 	bl	8001f3c <Servo_Motor_GENERATE>
		SYSTICK_DelayMs(50);
 8001d4e:	2032      	movs	r0, #50	; 0x32
 8001d50:	f000 f894 	bl	8001e7c <SYSTICK_DelayMs>
		x++;
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	3301      	adds	r3, #1
 8001d58:	71fb      	strb	r3, [r7, #7]
	while(x<MAX_ANGLE)
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b1d      	cmp	r3, #29
 8001d5e:	d9f2      	bls.n	8001d46 <SELF_PARKING+0x1e>

	}

	SYSTICK_DelayMs(500);
 8001d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d64:	f000 f88a 	bl	8001e7c <SYSTICK_DelayMs>
	MOTORS_Backward_Right(parking_speed);
 8001d68:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <SELF_PARKING+0x13c>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fdce 	bl	800190e <MOTORS_Backward_Right>

	while(PARKING_SAFE==1)
 8001d72:	e00e      	b.n	8001d92 <SELF_PARKING+0x6a>
	{

		back_ultrasonic_distance  = Ultrasonic_readDistance (& Ultrasonic_BackConf);
 8001d74:	483d      	ldr	r0, [pc, #244]	; (8001e6c <SELF_PARKING+0x144>)
 8001d76:	f000 fab3 	bl	80022e0 <Ultrasonic_readDistance>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a3c      	ldr	r2, [pc, #240]	; (8001e70 <SELF_PARKING+0x148>)
 8001d7e:	6013      	str	r3, [r2, #0]
		if(back_ultrasonic_distance<=P_FORWARD_DISTANCE)
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <SELF_PARKING+0x148>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2b14      	cmp	r3, #20
 8001d86:	d804      	bhi.n	8001d92 <SELF_PARKING+0x6a>
		{
			MOTORS_Stop();
 8001d88:	f7ff fde3 	bl	8001952 <MOTORS_Stop>
			PARKING_SAFE=0;
 8001d8c:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <SELF_PARKING+0x140>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
	while(PARKING_SAFE==1)
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <SELF_PARKING+0x140>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d0ec      	beq.n	8001d74 <SELF_PARKING+0x4c>

	}



	SYSTICK_DelayMs(1000);
 8001d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d9e:	f000 f86d 	bl	8001e7c <SYSTICK_DelayMs>
	SYSTICK_DelayMs(1000);
 8001da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da6:	f000 f869 	bl	8001e7c <SYSTICK_DelayMs>

	Servo_Motor_GENERATE(0);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 f8c6 	bl	8001f3c <Servo_Motor_GENERATE>
	x=0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	71fb      	strb	r3, [r7, #7]
	while(x<MIN_ANGLE)
 8001db4:	e009      	b.n	8001dca <SELF_PARKING+0xa2>
	{
		Servo_Motor_GENERATE(x);
 8001db6:	79fb      	ldrb	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f000 f8bf 	bl	8001f3c <Servo_Motor_GENERATE>
		SYSTICK_DelayMs(50);
 8001dbe:	2032      	movs	r0, #50	; 0x32
 8001dc0:	f000 f85c 	bl	8001e7c <SYSTICK_DelayMs>
		x++;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
	while(x<MIN_ANGLE)
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	2b13      	cmp	r3, #19
 8001dce:	d9f2      	bls.n	8001db6 <SELF_PARKING+0x8e>

	}

	SYSTICK_DelayMs(1000);
 8001dd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd4:	f000 f852 	bl	8001e7c <SYSTICK_DelayMs>
	PARKING_SAFE=1;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <SELF_PARKING+0x140>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
	MOTORS_Backward_Left(parking_speed);
 8001dde:	4b21      	ldr	r3, [pc, #132]	; (8001e64 <SELF_PARKING+0x13c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fda4 	bl	8001930 <MOTORS_Backward_Left>



	while(PARKING_SAFE==1){
 8001de8:	e00e      	b.n	8001e08 <SELF_PARKING+0xe0>

		back_ultrasonic_distance  = Ultrasonic_readDistance (& Ultrasonic_BackConf);
 8001dea:	4820      	ldr	r0, [pc, #128]	; (8001e6c <SELF_PARKING+0x144>)
 8001dec:	f000 fa78 	bl	80022e0 <Ultrasonic_readDistance>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a1f      	ldr	r2, [pc, #124]	; (8001e70 <SELF_PARKING+0x148>)
 8001df4:	6013      	str	r3, [r2, #0]
		if(back_ultrasonic_distance<=P_MIN_SAFE_DISTANCE)
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <SELF_PARKING+0x148>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	d804      	bhi.n	8001e08 <SELF_PARKING+0xe0>
		{
			MOTORS_Stop();
 8001dfe:	f7ff fda8 	bl	8001952 <MOTORS_Stop>
			PARKING_SAFE=0;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <SELF_PARKING+0x140>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
	while(PARKING_SAFE==1){
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <SELF_PARKING+0x140>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d0ec      	beq.n	8001dea <SELF_PARKING+0xc2>
	}



	/*forward*/
	SYSTICK_DelayMs(1000);
 8001e10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e14:	f000 f832 	bl	8001e7c <SYSTICK_DelayMs>
	PARKING_SAFE=1;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <SELF_PARKING+0x140>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
	front_ultrasonic_distance= Ultrasonic_readDistance (&Ultrasonic_BackConf);
 8001e1e:	4813      	ldr	r0, [pc, #76]	; (8001e6c <SELF_PARKING+0x144>)
 8001e20:	f000 fa5e 	bl	80022e0 <Ultrasonic_readDistance>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <SELF_PARKING+0x14c>)
 8001e28:	6013      	str	r3, [r2, #0]

	if(front_ultrasonic_distance>P_FORWARD_DISTANCE)
 8001e2a:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <SELF_PARKING+0x14c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b14      	cmp	r3, #20
 8001e30:	d90d      	bls.n	8001e4e <SELF_PARKING+0x126>
	{
		MOTORS_Forward(parking_speed-15);
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <SELF_PARKING+0x13c>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	3b0f      	subs	r3, #15
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fd12 	bl	8001864 <MOTORS_Forward>
	}
	while(front_ultrasonic_distance>=P_FORWARD_DISTANCE)
 8001e40:	e005      	b.n	8001e4e <SELF_PARKING+0x126>
	{
		front_ultrasonic_distance  = Ultrasonic_readDistance (& Ultrasonic_FrontConf);
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <SELF_PARKING+0x150>)
 8001e44:	f000 fa4c 	bl	80022e0 <Ultrasonic_readDistance>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <SELF_PARKING+0x14c>)
 8001e4c:	6013      	str	r3, [r2, #0]
	while(front_ultrasonic_distance>=P_FORWARD_DISTANCE)
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <SELF_PARKING+0x14c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b13      	cmp	r3, #19
 8001e54:	d8f5      	bhi.n	8001e42 <SELF_PARKING+0x11a>
	}
	MOTORS_Stop();
 8001e56:	f7ff fd7c 	bl	8001952 <MOTORS_Stop>



}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000007d 	.word	0x2000007d
 8001e68:	2000007c 	.word	0x2000007c
 8001e6c:	2000003c 	.word	0x2000003c
 8001e70:	20000078 	.word	0x20000078
 8001e74:	20000074 	.word	0x20000074
 8001e78:	20000038 	.word	0x20000038

08001e7c <SYSTICK_DelayMs>:
#include "SYSTICK_interface.h"



void SYSTICK_DelayMs(uint32_t Copy_u32TimeMs)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]

	/* Set the clock source for the SYSTICK timer */
	SYSTICK -> CSR |= (1 << CLKSOURCE);
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <SYSTICK_DelayMs+0x50>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <SYSTICK_DelayMs+0x50>)
 8001e8a:	f043 0304 	orr.w	r3, r3, #4
 8001e8e:	6013      	str	r3, [r2, #0]
	/*Reset the current SYSTICK counter value */
	SYSTICK -> CVR = INITIAL_LOAD_VAL;
 8001e90:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <SYSTICK_DelayMs+0x50>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	609a      	str	r2, [r3, #8]
	/* Set the reload value for the SYSTICK timer based on the desired delay time */
	SYSTICK -> RVR = (Copy_u32TimeMs * (SYSTEM_FREQUANCY/_10POW3));
 8001e96:	4a0d      	ldr	r2, [pc, #52]	; (8001ecc <SYSTICK_DelayMs+0x50>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	6053      	str	r3, [r2, #4]
	/* Enable the SYSTICK timer */
	SYSTICK -> CSR |= (1 << STKENABLE);
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <SYSTICK_DelayMs+0x50>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <SYSTICK_DelayMs+0x50>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]
	/*   Busy waiting loop to wait for the COUNTFLAG to indicate that the timer has reached 0 */
	while( (((SYSTICK->CSR) >> COUNTFLAG) & NUM) != READY_FLAG)
 8001eb0:	bf00      	nop
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <SYSTICK_DelayMs+0x50>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	0c1b      	lsrs	r3, r3, #16
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d1f8      	bne.n	8001eb2 <SYSTICK_DelayMs+0x36>
	{
		/*nothing*/
	}
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <SYSTICK_DelayUs>:

void SYSTICK_DelayUs(uint32_t Copy_u32TimeUs)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	/* Set the clock source for the SYSTICK timer */
	SYSTICK -> CSR |= (1 << CLKSOURCE);
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <SYSTICK_DelayUs+0x4c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <SYSTICK_DelayUs+0x4c>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6013      	str	r3, [r2, #0]
	/* Set the reload value for the SYSTICK timer based on the desired delay time in microseconds */
	SYSTICK -> RVR = (Copy_u32TimeUs * (SYSTEM_FREQUANCY/_10POW6));
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <SYSTICK_DelayUs+0x4c>)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	6053      	str	r3, [r2, #4]
	/* Reset the current SYSTICK counter value */
	SYSTICK-> CVR = INITIAL_LOAD_VAL;
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <SYSTICK_DelayUs+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	609a      	str	r2, [r3, #8]
	/* Enable the SYSTICK timer */
	SYSTICK -> CSR |= (1 << STKENABLE);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <SYSTICK_DelayUs+0x4c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a09      	ldr	r2, [pc, #36]	; (8001f1c <SYSTICK_DelayUs+0x4c>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6013      	str	r3, [r2, #0]
	/* Busy waiting loop to wait for the COUNTFLAG to indicate that the timer has reached 0 */
	while( (((SYSTICK->CSR) >> COUNTFLAG) & NUM) != READY_FLAG)
 8001efe:	bf00      	nop
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <SYSTICK_DelayUs+0x4c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d1f8      	bne.n	8001f00 <SYSTICK_DelayUs+0x30>
	{
		/*nothing*/
	}
}
 8001f0e:	bf00      	nop
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <servo_init>:
#include "Servo_Config.h"

extern const PinConfig_t SERVO1_PinConfig;

void servo_init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
	GPIO_u8PinInit(&SERVO1_PinConfig);
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <servo_init+0x18>)
 8001f26:	f7fe ffef 	bl	8000f08 <GPIO_u8PinInit>

	GPT_u8InitPwmChannel(SERVO_TIMER, SERVO_CHANNEL);
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f7ff f9cd 	bl	80012cc <GPT_u8InitPwmChannel>

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08002800 	.word	0x08002800

08001f3c <Servo_Motor_GENERATE>:

void Servo_Motor_GENERATE(uint8_t Dgree)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]

	/*if(Dgree<0){Dgree=0;}
	if(Dgree>180){Dgree=180;}*/
	/* Dgree = (Dgree/15) + 5;*/
	GPT_u8SetPWM(SERVO_TIMER, SERVO_CHANNEL, 50, Dgree);
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fccd 	bl	80008e8 <__aeabi_ui2f>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2232      	movs	r2, #50	; 0x32
 8001f52:	2101      	movs	r1, #1
 8001f54:	2002      	movs	r0, #2
 8001f56:	f7ff fb0f 	bl	8001578 <GPT_u8SetPWM>

}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <TIM1_UP_IRQHandler>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	if(TIMER1_Pf != NULL)
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <TIM1_UP_IRQHandler+0x24>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <TIM1_UP_IRQHandler+0x12>
	{
		TIMER1_Pf();
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <TIM1_UP_IRQHandler+0x24>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4798      	blx	r3
	}
	CLR_BIT(TIMER1->SR,0); /* Clear the update flag */
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <TIM1_UP_IRQHandler+0x28>)
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <TIM1_UP_IRQHandler+0x28>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6113      	str	r3, [r2, #16]
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000080 	.word	0x20000080
 8001f8c:	40012c00 	.word	0x40012c00

08001f90 <USART_Init>:




void USART_Init(const USART_ConfigReg_t *USART_ConfigReg)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	USART_Reg_Def_t * USARTX=usart_num[USART_ConfigReg->number];
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	; (8002094 <USART_Init+0x104>)
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	60fb      	str	r3, [r7, #12]

	switch (USART_ConfigReg->mode)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d014      	beq.n	8001fd8 <USART_Init+0x48>
 8001fae:	2b03      	cmp	r3, #3
 8001fb0:	dc1f      	bgt.n	8001ff2 <USART_Init+0x62>
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d002      	beq.n	8001fbc <USART_Init+0x2c>
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d007      	beq.n	8001fca <USART_Init+0x3a>
	{
	case Enable_RX: SET_BIT(USARTX->CR1,RE); break;
	case Enable_TX: SET_BIT(USARTX->CR1,TE); break;
	case Enable_TX_RX: SET_BIT(USARTX->CR1,RE); SET_BIT(USARTX->CR1,TE); break;
	default: break;
 8001fba:	e01a      	b.n	8001ff2 <USART_Init+0x62>
	case Enable_RX: SET_BIT(USARTX->CR1,RE); break;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f043 0204 	orr.w	r2, r3, #4
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	e014      	b.n	8001ff4 <USART_Init+0x64>
	case Enable_TX: SET_BIT(USARTX->CR1,TE); break;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f043 0208 	orr.w	r2, r3, #8
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	e00d      	b.n	8001ff4 <USART_Init+0x64>
	case Enable_TX_RX: SET_BIT(USARTX->CR1,RE); SET_BIT(USARTX->CR1,TE); break;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f043 0204 	orr.w	r2, r3, #4
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f043 0208 	orr.w	r2, r3, #8
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	60da      	str	r2, [r3, #12]
 8001ff0:	e000      	b.n	8001ff4 <USART_Init+0x64>
	default: break;
 8001ff2:	bf00      	nop
	}

	USARTX->CR1|=(USART_ConfigReg->word)<<M;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	78d2      	ldrb	r2, [r2, #3]
 8001ffc:	0312      	lsls	r2, r2, #12
 8001ffe:	431a      	orrs	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	60da      	str	r2, [r3, #12]

	USARTX->CR2&=~USART_STOP_MASK;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	611a      	str	r2, [r3, #16]
	USARTX->CR2|=(USART_ConfigReg->stop_bit)<<STOP;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	7892      	ldrb	r2, [r2, #2]
 8002018:	0312      	lsls	r2, r2, #12
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	611a      	str	r2, [r3, #16]

	if(USART_ConfigReg->parity==0)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	791b      	ldrb	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d106      	bne.n	8002036 <USART_Init+0xa6>
	{
		CLR_BIT(USARTX->CR1,PCE);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	e00d      	b.n	8002052 <USART_Init+0xc2>
	}
	else
	{
		USARTX->CR1&=~USART_PARITY_MASK;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	60da      	str	r2, [r3, #12]
		USARTX->CR1|=(USART_ConfigReg->parity)<<PS;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	7912      	ldrb	r2, [r2, #4]
 800204a:	0252      	lsls	r2, r2, #9
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	60da      	str	r2, [r3, #12]
	}

	USARTX->CR3&=~USART_HALFDUBLIX_MASK;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f023 0208 	bic.w	r2, r3, #8
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	615a      	str	r2, [r3, #20]
	USARTX->CR3|=(USART_ConfigReg->hd)<<HDSEL;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	7b12      	ldrb	r2, [r2, #12]
 8002066:	00d2      	lsls	r2, r2, #3
 8002068:	431a      	orrs	r2, r3
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	615a      	str	r2, [r3, #20]
	SET_BIT(USARTX->CR1,RE);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f043 0204 	orr.w	r2, r3, #4
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	60da      	str	r2, [r3, #12]

	USARTX->CR2|=(USART_ConfigReg->clock)<<CLKEN;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	7b52      	ldrb	r2, [r2, #13]
 8002082:	02d2      	lsls	r2, r2, #11
 8002084:	431a      	orrs	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	611a      	str	r2, [r3, #16]


}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	2000002c 	.word	0x2000002c

08002098 <USART_BaudRate>:




void USART_BaudRate( const USART_ConfigReg_t *USART_ConfigReg  )
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	USART_Reg_Def_t * USARTX=usart_num[USART_ConfigReg->number];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <USART_BaudRate+0x44>)
 80020a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ac:	60fb      	str	r3, [r7, #12]

	uint8_t mantissa=52;
 80020ae:	2334      	movs	r3, #52	; 0x34
 80020b0:	72fb      	strb	r3, [r7, #11]
	uint8_t fraction=1;
 80020b2:	2301      	movs	r3, #1
 80020b4:	72bb      	strb	r3, [r7, #10]
	USARTX->BRR|=mantissa<<DIV_Mantissa;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	7afa      	ldrb	r2, [r7, #11]
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	431a      	orrs	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	609a      	str	r2, [r3, #8]

	USARTX->BRR|=fraction;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	7abb      	ldrb	r3, [r7, #10]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	609a      	str	r2, [r3, #8]


}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	2000002c 	.word	0x2000002c

080020e0 <USART_Enable>:

void USART_Enable(USART_Number_t number, USART_Enable_t enable)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	460a      	mov	r2, r1
 80020ea:	71fb      	strb	r3, [r7, #7]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71bb      	strb	r3, [r7, #6]
	USART_Reg_Def_t * USARTX=usart_num[number];
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <USART_Enable+0x4c>)
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	60fb      	str	r3, [r7, #12]
	switch (enable)
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <USART_Enable+0x26>
 8002100:	2b01      	cmp	r3, #1
 8002102:	d007      	beq.n	8002114 <USART_Enable+0x34>
	{
	case Disable_USART: CLR_BIT(USARTX->CR1,UE); break;
	case Enable_USART: SET_BIT(USARTX->CR1,UE); break;
	default: break;
 8002104:	e00d      	b.n	8002122 <USART_Enable+0x42>
	case Disable_USART: CLR_BIT(USARTX->CR1,UE); break;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	e006      	b.n	8002122 <USART_Enable+0x42>
	case Enable_USART: SET_BIT(USARTX->CR1,UE); break;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	bf00      	nop
	}
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	2000002c 	.word	0x2000002c

08002130 <USART_TX_Data>:
	USART_Reg_Def_t * USARTX=usart_num[number];
	CLR_BIT(USARTX->CR3,RTSE);
}

void USART_TX_Data(USART_Number_t number, uint8_t data)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	460a      	mov	r2, r1
 800213a:	71fb      	strb	r3, [r7, #7]
 800213c:	4613      	mov	r3, r2
 800213e:	71bb      	strb	r3, [r7, #6]
	USART_Reg_Def_t * USARTX=usart_num[number];
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	4a0e      	ldr	r2, [pc, #56]	; (800217c <USART_TX_Data+0x4c>)
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	60fb      	str	r3, [r7, #12]
	while(READ_BIT(USARTX->SR,TXE)!=TX_REG_EMPTY);
 800214a:	bf00      	nop
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	09db      	lsrs	r3, r3, #7
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b01      	cmp	r3, #1
 8002158:	d1f8      	bne.n	800214c <USART_TX_Data+0x1c>
	USARTX->DR=data ;
 800215a:	79ba      	ldrb	r2, [r7, #6]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	605a      	str	r2, [r3, #4]

	while(READ_BIT(USARTX->SR,TC)!=TX_COMPLETED);
 8002160:	bf00      	nop
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d1f8      	bne.n	8002162 <USART_TX_Data+0x32>

}
 8002170:	bf00      	nop
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	2000002c 	.word	0x2000002c

08002180 <USART_RxIT_Enable>:

	return data;
}

void USART_RxIT_Enable(USART_Number_t number, USART_Enable_t enable)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	460a      	mov	r2, r1
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	4613      	mov	r3, r2
 800218e:	71bb      	strb	r3, [r7, #6]
	USART_Reg_Def_t * USARTX=usart_num[number];
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	4a0e      	ldr	r2, [pc, #56]	; (80021cc <USART_RxIT_Enable+0x4c>)
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	60fb      	str	r3, [r7, #12]
	switch (enable)
 800219a:	79bb      	ldrb	r3, [r7, #6]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <USART_RxIT_Enable+0x26>
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d007      	beq.n	80021b4 <USART_RxIT_Enable+0x34>
	{
	case Disable_USART: CLR_BIT(USARTX->CR1,RXNEIE); break;
	case Enable_USART: SET_BIT(USARTX->CR1,RXNEIE); break;
	default: break;
 80021a4:	e00d      	b.n	80021c2 <USART_RxIT_Enable+0x42>
	case Disable_USART: CLR_BIT(USARTX->CR1,RXNEIE); break;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	f023 0220 	bic.w	r2, r3, #32
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	e006      	b.n	80021c2 <USART_RxIT_Enable+0x42>
	case Enable_USART: SET_BIT(USARTX->CR1,RXNEIE); break;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f043 0220 	orr.w	r2, r3, #32
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	bf00      	nop
	}

}
 80021c2:	bf00      	nop
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bc80      	pop	{r7}
 80021ca:	4770      	bx	lr
 80021cc:	2000002c 	.word	0x2000002c

080021d0 <USART_u8ReadDataRegister>:
	USART_Reg_Def_t * USARTX=usart_num[number];
	USARTX->SR = 0;
}

uint8_t USART_u8ReadDataRegister(USART_Number_t number)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
	USART_Reg_Def_t * USARTX=usart_num[number];
 80021da:	79fb      	ldrb	r3, [r7, #7]
 80021dc:	4a05      	ldr	r2, [pc, #20]	; (80021f4 <USART_u8ReadDataRegister+0x24>)
 80021de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e2:	60fb      	str	r3, [r7, #12]
	return USARTX -> DR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	b2db      	uxtb	r3, r3
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	2000002c 	.word	0x2000002c

080021f8 <USART1_voidSetCallBack>:



void USART1_voidSetCallBack( void (*ptr) (void) )
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
	USART1_CallBack =ptr;
 8002200:	4a03      	ldr	r2, [pc, #12]	; (8002210 <USART1_voidSetCallBack+0x18>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6013      	str	r3, [r2, #0]
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	20000084 	.word	0x20000084

08002214 <USART3_voidSetCallBack>:
{
	USART2_CallBack = ptr;
}

void USART3_voidSetCallBack( void (*ptr) (void) )
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	USART3_CallBack = ptr;
 800221c:	4a03      	ldr	r2, [pc, #12]	; (800222c <USART3_voidSetCallBack+0x18>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	2000008c 	.word	0x2000008c

08002230 <USART1_IRQHandler>:


/*IRQ of USART1*/
void USART1_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
	usart_num[USART1]->SR = 0;
 8002234:	4b06      	ldr	r3, [pc, #24]	; (8002250 <USART1_IRQHandler+0x20>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
	if(USART1_CallBack!=NULL)
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <USART1_IRQHandler+0x24>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d002      	beq.n	800224a <USART1_IRQHandler+0x1a>
	{
		USART1_CallBack();
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <USART1_IRQHandler+0x24>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4798      	blx	r3
	}
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000002c 	.word	0x2000002c
 8002254:	20000084 	.word	0x20000084

08002258 <USART2_IRQHandler>:

/*IRQ of USART2*/
void USART2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	usart_num[USART2]->SR = 0;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <USART2_IRQHandler+0x20>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
	if(USART2_CallBack!=NULL)
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <USART2_IRQHandler+0x24>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <USART2_IRQHandler+0x1a>
	{
		USART2_CallBack();
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <USART2_IRQHandler+0x24>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4798      	blx	r3
	}
}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000002c 	.word	0x2000002c
 800227c:	20000088 	.word	0x20000088

08002280 <USART3_IRQHandler>:

/*IRQ of USART3*/
void USART3_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0

	usart_num[USART3]->SR = 0;
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <USART3_IRQHandler+0x20>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
	if(USART3_CallBack!=NULL)
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <USART3_IRQHandler+0x24>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <USART3_IRQHandler+0x1a>
	{
		USART3_CallBack();
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <USART3_IRQHandler+0x24>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4798      	blx	r3
	}

}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000002c 	.word	0x2000002c
 80022a4:	2000008c 	.word	0x2000008c

080022a8 <Ultrasonic_Init>:
 * @param	:	void
 * @retval	:	void
 *
 * */
void Ultrasonic_Init (void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	GPIO_u8PinInit(&Ultrasonics_Echo_Pin);
 80022ac:	4808      	ldr	r0, [pc, #32]	; (80022d0 <Ultrasonic_Init+0x28>)
 80022ae:	f7fe fe2b 	bl	8000f08 <GPIO_u8PinInit>

	SYSTICK_DelayMs(486);
 80022b2:	f44f 70f3 	mov.w	r0, #486	; 0x1e6
 80022b6:	f7ff fde1 	bl	8001e7c <SYSTICK_DelayMs>

	GPIO_u8PinInit(&Front_Ultrasonic_Trig_Pin);
 80022ba:	4806      	ldr	r0, [pc, #24]	; (80022d4 <Ultrasonic_Init+0x2c>)
 80022bc:	f7fe fe24 	bl	8000f08 <GPIO_u8PinInit>
	GPIO_u8PinInit(&Back_Ultrasonic_Trig_Pin);
 80022c0:	4805      	ldr	r0, [pc, #20]	; (80022d8 <Ultrasonic_Init+0x30>)
 80022c2:	f7fe fe21 	bl	8000f08 <GPIO_u8PinInit>

	SYSTICK_DelayMs(1);
 80022c6:	2001      	movs	r0, #1
 80022c8:	f7ff fdd8 	bl	8001e7c <SYSTICK_DelayMs>
}
 80022cc:	bf00      	nop
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	08002848 	.word	0x08002848
 80022d4:	08002838 	.word	0x08002838
 80022d8:	08002840 	.word	0x08002840
 80022dc:	00000000 	.word	0x00000000

080022e0 <Ultrasonic_readDistance>:
 * @param	:	Ultrasonic_Conf     (Ultrasonic_t*)
 * @retval	:	uint32_t
 *
 * */
uint32_t Ultrasonic_readDistance (Ultrasonic_t* Ultrasonic_Conf)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	uint32_t TicksNumber = 0 , Local_TimeoutCounter = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	2300      	movs	r3, #0
 80022ee:	613b      	str	r3, [r7, #16]
	uint32_t Distance    = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
	/*trig pulse to trigger pin
	 * 3us low
	 * 10us high
	 * then low
	 */
	GPIO_u8SetPinValue(Ultrasonic_Conf->TrigPort , Ultrasonic_Conf->TrigPin , PIN_LOW);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7818      	ldrb	r0, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	785b      	ldrb	r3, [r3, #1]
 80022fc:	2200      	movs	r2, #0
 80022fe:	4619      	mov	r1, r3
 8002300:	f7fe ff72 	bl	80011e8 <GPIO_u8SetPinValue>
	SYSTICK_DelayUs(TIME_FOR_LOW_PULSE);
 8002304:	2003      	movs	r0, #3
 8002306:	f7ff fde3 	bl	8001ed0 <SYSTICK_DelayUs>
	GPIO_u8SetPinValue(Ultrasonic_Conf->TrigPort , Ultrasonic_Conf->TrigPin , PIN_HIGH);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7818      	ldrb	r0, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	785b      	ldrb	r3, [r3, #1]
 8002312:	2201      	movs	r2, #1
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe ff67 	bl	80011e8 <GPIO_u8SetPinValue>
	SYSTICK_DelayUs(TIME_FOR_HIGH_PULSE);
 800231a:	200a      	movs	r0, #10
 800231c:	f7ff fdd8 	bl	8001ed0 <SYSTICK_DelayUs>
	GPIO_u8SetPinValue(Ultrasonic_Conf->TrigPort , Ultrasonic_Conf->TrigPin , PIN_LOW);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	7818      	ldrb	r0, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	785b      	ldrb	r3, [r3, #1]
 8002328:	2200      	movs	r2, #0
 800232a:	4619      	mov	r1, r3
 800232c:	f7fe ff5c 	bl	80011e8 <GPIO_u8SetPinValue>

	/*wait for generate 8 pulses (40KHZ)*/
	SYSTICK_DelayUs(TIME_FOR_EIGHT_PULSES) ;
 8002330:	20fa      	movs	r0, #250	; 0xfa
 8002332:	f7ff fdcd 	bl	8001ed0 <SYSTICK_DelayUs>

	/*wait until generating rising edge for echo pin*/
	while (1){
		PinVal_t  PinVal = PIN_LOW;
 8002336:	2300      	movs	r3, #0
 8002338:	72fb      	strb	r3, [r7, #11]
		GPIO_u8ReadPinValue( Ultrasonic_Conf->EchoPort , Ultrasonic_Conf->EchoPin , &PinVal);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7898      	ldrb	r0, [r3, #2]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	78db      	ldrb	r3, [r3, #3]
 8002342:	f107 020b 	add.w	r2, r7, #11
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe ff96 	bl	8001278 <GPIO_u8ReadPinValue>
		if(PinVal == PIN_HIGH) break;
 800234c:	7afb      	ldrb	r3, [r7, #11]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d1f1      	bne.n	8002336 <Ultrasonic_readDistance+0x56>
	}

	while (Local_TimeoutCounter < ULTRASONIC_TIMEOUT)
 8002352:	e016      	b.n	8002382 <Ultrasonic_readDistance+0xa2>
	{
		PinVal_t  PinVal = PIN_HIGH;
 8002354:	2301      	movs	r3, #1
 8002356:	72bb      	strb	r3, [r7, #10]
		GPIO_u8ReadPinValue( Ultrasonic_Conf->EchoPort , Ultrasonic_Conf->EchoPin , &PinVal);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7898      	ldrb	r0, [r3, #2]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	78db      	ldrb	r3, [r3, #3]
 8002360:	f107 020a 	add.w	r2, r7, #10
 8002364:	4619      	mov	r1, r3
 8002366:	f7fe ff87 	bl	8001278 <GPIO_u8ReadPinValue>
		if(PinVal == PIN_LOW) break;
 800236a:	7abb      	ldrb	r3, [r7, #10]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d00d      	beq.n	800238c <Ultrasonic_readDistance+0xac>

		Local_TimeoutCounter ++;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	3301      	adds	r3, #1
 8002374:	613b      	str	r3, [r7, #16]

		/*each iteration take 4.9 us*/
		TicksNumber ++ ;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
		SYSTICK_DelayUs(2) ;
 800237c:	2002      	movs	r0, #2
 800237e:	f7ff fda7 	bl	8001ed0 <SYSTICK_DelayUs>
	while (Local_TimeoutCounter < ULTRASONIC_TIMEOUT)
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <Ultrasonic_readDistance+0x110>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d9e4      	bls.n	8002354 <Ultrasonic_readDistance+0x74>
 800238a:	e000      	b.n	800238e <Ultrasonic_readDistance+0xae>
		if(PinVal == PIN_LOW) break;
 800238c:	bf00      	nop
	}

	if(Local_TimeoutCounter == ULTRASONIC_TIMEOUT){
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <Ultrasonic_readDistance+0x114>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d103      	bne.n	800239e <Ultrasonic_readDistance+0xbe>
		Distance = -1;
 8002396:	f04f 33ff 	mov.w	r3, #4294967295
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	e01b      	b.n	80023d6 <Ultrasonic_readDistance+0xf6>
	}
	else{
	    Distance = (TicksNumber + 0) * TIME_OF_EACH_ITERATION_IN_MICRO * SPEED_OF_SIGNAL_CM_PER_U;
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7fe f952 	bl	8000648 <__aeabi_ui2d>
 80023a4:	a30e      	add	r3, pc, #56	; (adr r3, 80023e0 <Ultrasonic_readDistance+0x100>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fd fee1 	bl	8000170 <__aeabi_dmul>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	a30c      	add	r3, pc, #48	; (adr r3, 80023e8 <Ultrasonic_readDistance+0x108>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fd fed8 	bl	8000170 <__aeabi_dmul>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe f9b8 	bl	800073c <__aeabi_d2uiz>
 80023cc:	4603      	mov	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]
	    Distance = Distance / 2;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]
	}

	return Distance ;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	66666666 	.word	0x66666666
 80023e4:	40346666 	.word	0x40346666
 80023e8:	04816f00 	.word	0x04816f00
 80023ec:	3fa18fc5 	.word	0x3fa18fc5
 80023f0:	004c4b3f 	.word	0x004c4b3f
 80023f4:	004c4b40 	.word	0x004c4b40

080023f8 <main>:
extern Ultrasonic_t Ultrasonic_BackConf;
extern Ultrasonic_t Ultrasonic_FrontConf;


int main(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	init();
 80023fc:	f7ff fbbe 	bl	8001b7c <init>

	while(1)
	{

		switch(G_u8DataFromBluetooth)
 8002400:	4bbd      	ldr	r3, [pc, #756]	; (80026f8 <main+0x300>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	3b31      	subs	r3, #49	; 0x31
 8002406:	2b41      	cmp	r3, #65	; 0x41
 8002408:	f200 8149 	bhi.w	800269e <main+0x2a6>
 800240c:	a201      	add	r2, pc, #4	; (adr r2, 8002414 <main+0x1c>)
 800240e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002412:	bf00      	nop
 8002414:	080025cf 	.word	0x080025cf
 8002418:	080025cf 	.word	0x080025cf
 800241c:	080025cf 	.word	0x080025cf
 8002420:	080025cf 	.word	0x080025cf
 8002424:	080025cf 	.word	0x080025cf
 8002428:	080025cf 	.word	0x080025cf
 800242c:	080025cf 	.word	0x080025cf
 8002430:	080025cf 	.word	0x080025cf
 8002434:	080025cf 	.word	0x080025cf
 8002438:	0800269f 	.word	0x0800269f
 800243c:	0800269f 	.word	0x0800269f
 8002440:	0800269f 	.word	0x0800269f
 8002444:	0800269f 	.word	0x0800269f
 8002448:	0800269f 	.word	0x0800269f
 800244c:	0800269f 	.word	0x0800269f
 8002450:	0800269f 	.word	0x0800269f
 8002454:	0800269f 	.word	0x0800269f
 8002458:	08002545 	.word	0x08002545
 800245c:	0800251d 	.word	0x0800251d
 8002460:	0800269f 	.word	0x0800269f
 8002464:	0800269f 	.word	0x0800269f
 8002468:	0800252d 	.word	0x0800252d
 800246c:	0800269f 	.word	0x0800269f
 8002470:	0800269f 	.word	0x0800269f
 8002474:	0800269f 	.word	0x0800269f
 8002478:	0800269f 	.word	0x0800269f
 800247c:	0800269f 	.word	0x0800269f
 8002480:	08002575 	.word	0x08002575
 8002484:	0800269f 	.word	0x0800269f
 8002488:	0800269f 	.word	0x0800269f
 800248c:	0800269f 	.word	0x0800269f
 8002490:	0800251d 	.word	0x0800251d
 8002494:	0800269f 	.word	0x0800269f
 8002498:	0800255d 	.word	0x0800255d
 800249c:	080025bd 	.word	0x080025bd
 80024a0:	0800269f 	.word	0x0800269f
 80024a4:	0800269f 	.word	0x0800269f
 80024a8:	0800269f 	.word	0x0800269f
 80024ac:	0800269f 	.word	0x0800269f
 80024b0:	0800269f 	.word	0x0800269f
 80024b4:	0800269f 	.word	0x0800269f
 80024b8:	0800269f 	.word	0x0800269f
 80024bc:	0800269f 	.word	0x0800269f
 80024c0:	0800269f 	.word	0x0800269f
 80024c4:	0800269f 	.word	0x0800269f
 80024c8:	0800269f 	.word	0x0800269f
 80024cc:	0800269f 	.word	0x0800269f
 80024d0:	0800269f 	.word	0x0800269f
 80024d4:	0800269f 	.word	0x0800269f
 80024d8:	0800269f 	.word	0x0800269f
 80024dc:	0800269f 	.word	0x0800269f
 80024e0:	0800269f 	.word	0x0800269f
 80024e4:	0800269f 	.word	0x0800269f
 80024e8:	0800269f 	.word	0x0800269f
 80024ec:	0800269f 	.word	0x0800269f
 80024f0:	0800269f 	.word	0x0800269f
 80024f4:	0800269f 	.word	0x0800269f
 80024f8:	0800269f 	.word	0x0800269f
 80024fc:	0800269f 	.word	0x0800269f
 8002500:	080025a5 	.word	0x080025a5
 8002504:	0800269f 	.word	0x0800269f
 8002508:	0800269f 	.word	0x0800269f
 800250c:	0800269f 	.word	0x0800269f
 8002510:	0800269f 	.word	0x0800269f
 8002514:	0800269f 	.word	0x0800269f
 8002518:	0800258d 	.word	0x0800258d
		{
		case ACC_SYSTEM:
		case SELF_PARKING_SYSTEM:
			Current_System = G_u8DataFromBluetooth;
 800251c:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <main+0x300>)
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	4b76      	ldr	r3, [pc, #472]	; (80026fc <main+0x304>)
 8002522:	701a      	strb	r2, [r3, #0]
			G_u8DataFromBluetooth = 0 ;
 8002524:	4b74      	ldr	r3, [pc, #464]	; (80026f8 <main+0x300>)
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
			break;
 800252a:	e0b9      	b.n	80026a0 <main+0x2a8>

		case MOVE_FORWARD:
			MOTORS_Forward(Current_Speed);
 800252c:	4b74      	ldr	r3, [pc, #464]	; (8002700 <main+0x308>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff f997 	bl	8001864 <MOTORS_Forward>
			Move = MOVE_FORWARD;
 8002536:	4b73      	ldr	r3, [pc, #460]	; (8002704 <main+0x30c>)
 8002538:	2246      	movs	r2, #70	; 0x46
 800253a:	701a      	strb	r2, [r3, #0]
			switched = 1;
 800253c:	4b72      	ldr	r3, [pc, #456]	; (8002708 <main+0x310>)
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
			break;
 8002542:	e0ad      	b.n	80026a0 <main+0x2a8>

		case MOVE_BACKWARD:
			MOTORS_Backward(Current_Speed);
 8002544:	4b6e      	ldr	r3, [pc, #440]	; (8002700 <main+0x308>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff f99c 	bl	8001886 <MOTORS_Backward>
			Move = MOVE_BACKWARD;
 800254e:	4b6d      	ldr	r3, [pc, #436]	; (8002704 <main+0x30c>)
 8002550:	2242      	movs	r2, #66	; 0x42
 8002552:	701a      	strb	r2, [r3, #0]
			switched = 1;
 8002554:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <main+0x310>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
			break;
 800255a:	e0a1      	b.n	80026a0 <main+0x2a8>

		case MOVE_RIGHT_FORWARD:
			MOTORS_Forward_Right(Current_Speed);
 800255c:	4b68      	ldr	r3, [pc, #416]	; (8002700 <main+0x308>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff f9c3 	bl	80018ec <MOTORS_Forward_Right>
			Move = MOVE_RIGHT_FORWARD;
 8002566:	4b67      	ldr	r3, [pc, #412]	; (8002704 <main+0x30c>)
 8002568:	2252      	movs	r2, #82	; 0x52
 800256a:	701a      	strb	r2, [r3, #0]
			switched = 1;
 800256c:	4b66      	ldr	r3, [pc, #408]	; (8002708 <main+0x310>)
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
			break;
 8002572:	e095      	b.n	80026a0 <main+0x2a8>

		case MOVE_LEFT_FORWARD:
			MOTORS_Forward_Left(Current_Speed);
 8002574:	4b62      	ldr	r3, [pc, #392]	; (8002700 <main+0x308>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff f9a6 	bl	80018ca <MOTORS_Forward_Left>
			Move = MOVE_LEFT_FORWARD;
 800257e:	4b61      	ldr	r3, [pc, #388]	; (8002704 <main+0x30c>)
 8002580:	224c      	movs	r2, #76	; 0x4c
 8002582:	701a      	strb	r2, [r3, #0]
			switched = 1;
 8002584:	4b60      	ldr	r3, [pc, #384]	; (8002708 <main+0x310>)
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]
			break;
 800258a:	e089      	b.n	80026a0 <main+0x2a8>

		case MOVE_RIGHT_BACKWARD:
			MOTORS_Backward_Right(Current_Speed);
 800258c:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <main+0x308>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7ff f9bc 	bl	800190e <MOTORS_Backward_Right>
			Move = MOVE_RIGHT_BACKWARD;
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <main+0x30c>)
 8002598:	2272      	movs	r2, #114	; 0x72
 800259a:	701a      	strb	r2, [r3, #0]
			switched = 1;
 800259c:	4b5a      	ldr	r3, [pc, #360]	; (8002708 <main+0x310>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
			break;
 80025a2:	e07d      	b.n	80026a0 <main+0x2a8>

		case MOVE_LEFT_BACKWARD:
			MOTORS_Backward_Left(Current_Speed);
 80025a4:	4b56      	ldr	r3, [pc, #344]	; (8002700 <main+0x308>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff f9c1 	bl	8001930 <MOTORS_Backward_Left>
			Move = MOVE_LEFT_BACKWARD;
 80025ae:	4b55      	ldr	r3, [pc, #340]	; (8002704 <main+0x30c>)
 80025b0:	226c      	movs	r2, #108	; 0x6c
 80025b2:	701a      	strb	r2, [r3, #0]
			switched = 1;
 80025b4:	4b54      	ldr	r3, [pc, #336]	; (8002708 <main+0x310>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
			break;
 80025ba:	e071      	b.n	80026a0 <main+0x2a8>

		case STOP_CAR:
			MOTORS_Stop();
 80025bc:	f7ff f9c9 	bl	8001952 <MOTORS_Stop>
			Current_Speed = 0;
 80025c0:	4b4f      	ldr	r3, [pc, #316]	; (8002700 <main+0x308>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	701a      	strb	r2, [r3, #0]
			switched = 1;
 80025c6:	4b50      	ldr	r3, [pc, #320]	; (8002708 <main+0x310>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
			break;
 80025cc:	e068      	b.n	80026a0 <main+0x2a8>

		case SPEED_10 ... SPEED_90:
		    Current_Speed = (G_u8DataFromBluetooth - '0') * 10;
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <main+0x300>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3320      	adds	r3, #32
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	4b47      	ldr	r3, [pc, #284]	; (8002700 <main+0x308>)
 80025e2:	701a      	strb	r2, [r3, #0]
		    switch(Move)
 80025e4:	4b47      	ldr	r3, [pc, #284]	; (8002704 <main+0x30c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b72      	cmp	r3, #114	; 0x72
 80025ea:	d048      	beq.n	800267e <main+0x286>
 80025ec:	2b72      	cmp	r3, #114	; 0x72
 80025ee:	dc52      	bgt.n	8002696 <main+0x29e>
 80025f0:	2b52      	cmp	r3, #82	; 0x52
 80025f2:	dc29      	bgt.n	8002648 <main+0x250>
 80025f4:	2b42      	cmp	r3, #66	; 0x42
 80025f6:	db4e      	blt.n	8002696 <main+0x29e>
 80025f8:	3b42      	subs	r3, #66	; 0x42
 80025fa:	2b10      	cmp	r3, #16
 80025fc:	d84b      	bhi.n	8002696 <main+0x29e>
 80025fe:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <main+0x20c>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	0800265b 	.word	0x0800265b
 8002608:	08002697 	.word	0x08002697
 800260c:	08002697 	.word	0x08002697
 8002610:	08002697 	.word	0x08002697
 8002614:	0800264f 	.word	0x0800264f
 8002618:	08002697 	.word	0x08002697
 800261c:	08002697 	.word	0x08002697
 8002620:	08002697 	.word	0x08002697
 8002624:	08002697 	.word	0x08002697
 8002628:	08002697 	.word	0x08002697
 800262c:	08002673 	.word	0x08002673
 8002630:	08002697 	.word	0x08002697
 8002634:	08002697 	.word	0x08002697
 8002638:	08002697 	.word	0x08002697
 800263c:	08002697 	.word	0x08002697
 8002640:	08002697 	.word	0x08002697
 8002644:	08002667 	.word	0x08002667
 8002648:	2b6c      	cmp	r3, #108	; 0x6c
 800264a:	d01e      	beq.n	800268a <main+0x292>
 800264c:	e023      	b.n	8002696 <main+0x29e>
		    {
		    case MOVE_FORWARD:
			   MOTORS_Forward(Current_Speed);
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <main+0x308>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff f906 	bl	8001864 <MOTORS_Forward>
			   break;
 8002658:	e01d      	b.n	8002696 <main+0x29e>

		    case MOVE_BACKWARD:
			   MOTORS_Backward(Current_Speed);
 800265a:	4b29      	ldr	r3, [pc, #164]	; (8002700 <main+0x308>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f911 	bl	8001886 <MOTORS_Backward>
			   break;
 8002664:	e017      	b.n	8002696 <main+0x29e>

		    case MOVE_RIGHT_FORWARD:
			   MOTORS_Forward_Right(Current_Speed);
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <main+0x308>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff f93e 	bl	80018ec <MOTORS_Forward_Right>
			   break;
 8002670:	e011      	b.n	8002696 <main+0x29e>

		    case MOVE_LEFT_FORWARD:
			   MOTORS_Forward_Left(Current_Speed);
 8002672:	4b23      	ldr	r3, [pc, #140]	; (8002700 <main+0x308>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f927 	bl	80018ca <MOTORS_Forward_Left>
			   break;
 800267c:	e00b      	b.n	8002696 <main+0x29e>

		    case MOVE_RIGHT_BACKWARD:
			   MOTORS_Backward_Right(Current_Speed);
 800267e:	4b20      	ldr	r3, [pc, #128]	; (8002700 <main+0x308>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff f943 	bl	800190e <MOTORS_Backward_Right>
			   break;
 8002688:	e005      	b.n	8002696 <main+0x29e>

		    case MOVE_LEFT_BACKWARD:
			   MOTORS_Backward_Left(Current_Speed);
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <main+0x308>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f94e 	bl	8001930 <MOTORS_Backward_Left>
			   break;
 8002694:	bf00      	nop
		    }
		    switched = 1;
 8002696:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <main+0x310>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
		    break;
 800269c:	e000      	b.n	80026a0 <main+0x2a8>

		default:
			break;
 800269e:	bf00      	nop
		}


		if(switched)
 80026a0:	4b19      	ldr	r3, [pc, #100]	; (8002708 <main+0x310>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <main+0x2c2>
		{
			switched = 0;
 80026a8:	4b17      	ldr	r3, [pc, #92]	; (8002708 <main+0x310>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
			Current_System = AEB_SYSTEM;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <main+0x304>)
 80026b0:	2241      	movs	r2, #65	; 0x41
 80026b2:	701a      	strb	r2, [r3, #0]
			G_u8DataFromBluetooth  = 0;
 80026b4:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <main+0x300>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
		}


		switch(Current_System)
 80026ba:	4b10      	ldr	r3, [pc, #64]	; (80026fc <main+0x304>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b50      	cmp	r3, #80	; 0x50
 80026c0:	d00c      	beq.n	80026dc <main+0x2e4>
 80026c2:	2b50      	cmp	r3, #80	; 0x50
 80026c4:	dc10      	bgt.n	80026e8 <main+0x2f0>
 80026c6:	2b41      	cmp	r3, #65	; 0x41
 80026c8:	d002      	beq.n	80026d0 <main+0x2d8>
 80026ca:	2b43      	cmp	r3, #67	; 0x43
 80026cc:	d003      	beq.n	80026d6 <main+0x2de>
			SELF_PARKING();
			Current_System = AEB_SYSTEM;
			break;

		default:
			break;
 80026ce:	e00b      	b.n	80026e8 <main+0x2f0>
			AEB();
 80026d0:	f7fe fb7c 	bl	8000dcc <AEB>
			break;
 80026d4:	e009      	b.n	80026ea <main+0x2f2>
			ACC();
 80026d6:	f7fe fb45 	bl	8000d64 <ACC>
			break;
 80026da:	e006      	b.n	80026ea <main+0x2f2>
			SELF_PARKING();
 80026dc:	f7ff fb24 	bl	8001d28 <SELF_PARKING>
			Current_System = AEB_SYSTEM;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <main+0x304>)
 80026e2:	2241      	movs	r2, #65	; 0x41
 80026e4:	701a      	strb	r2, [r3, #0]
			break;
 80026e6:	e000      	b.n	80026ea <main+0x2f2>
			break;
 80026e8:	bf00      	nop
		}


		//Transmit your current speed to Raspberrypi
		USART_TX_Data(USART1 , Current_Speed);
 80026ea:	4b05      	ldr	r3, [pc, #20]	; (8002700 <main+0x308>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4619      	mov	r1, r3
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7ff fd1d 	bl	8002130 <USART_TX_Data>
		switch(G_u8DataFromBluetooth)
 80026f6:	e683      	b.n	8002400 <main+0x8>
 80026f8:	20000090 	.word	0x20000090
 80026fc:	20000041 	.word	0x20000041
 8002700:	20000092 	.word	0x20000092
 8002704:	20000040 	.word	0x20000040
 8002708:	20000094 	.word	0x20000094

0800270c <Reset_Handler>:
 800270c:	480d      	ldr	r0, [pc, #52]	; (8002744 <LoopForever+0x2>)
 800270e:	4685      	mov	sp, r0
 8002710:	f3af 8000 	nop.w
 8002714:	480c      	ldr	r0, [pc, #48]	; (8002748 <LoopForever+0x6>)
 8002716:	490d      	ldr	r1, [pc, #52]	; (800274c <LoopForever+0xa>)
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <LoopForever+0xe>)
 800271a:	2300      	movs	r3, #0
 800271c:	e002      	b.n	8002724 <LoopCopyDataInit>

0800271e <CopyDataInit>:
 800271e:	58d4      	ldr	r4, [r2, r3]
 8002720:	50c4      	str	r4, [r0, r3]
 8002722:	3304      	adds	r3, #4

08002724 <LoopCopyDataInit>:
 8002724:	18c4      	adds	r4, r0, r3
 8002726:	428c      	cmp	r4, r1
 8002728:	d3f9      	bcc.n	800271e <CopyDataInit>
 800272a:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <LoopForever+0x12>)
 800272c:	4c0a      	ldr	r4, [pc, #40]	; (8002758 <LoopForever+0x16>)
 800272e:	2300      	movs	r3, #0
 8002730:	e001      	b.n	8002736 <LoopFillZerobss>

08002732 <FillZerobss>:
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	3204      	adds	r2, #4

08002736 <LoopFillZerobss>:
 8002736:	42a2      	cmp	r2, r4
 8002738:	d3fb      	bcc.n	8002732 <FillZerobss>
 800273a:	f000 f811 	bl	8002760 <__libc_init_array>
 800273e:	f7ff fe5b 	bl	80023f8 <main>

08002742 <LoopForever>:
 8002742:	e7fe      	b.n	8002742 <LoopForever>
 8002744:	20005000 	.word	0x20005000
 8002748:	20000000 	.word	0x20000000
 800274c:	20000044 	.word	0x20000044
 8002750:	08002860 	.word	0x08002860
 8002754:	20000044 	.word	0x20000044
 8002758:	20000098 	.word	0x20000098

0800275c <ADC1_2_IRQHandler>:
 800275c:	e7fe      	b.n	800275c <ADC1_2_IRQHandler>
	...

08002760 <__libc_init_array>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	2600      	movs	r6, #0
 8002764:	4d0c      	ldr	r5, [pc, #48]	; (8002798 <__libc_init_array+0x38>)
 8002766:	4c0d      	ldr	r4, [pc, #52]	; (800279c <__libc_init_array+0x3c>)
 8002768:	1b64      	subs	r4, r4, r5
 800276a:	10a4      	asrs	r4, r4, #2
 800276c:	42a6      	cmp	r6, r4
 800276e:	d109      	bne.n	8002784 <__libc_init_array+0x24>
 8002770:	f000 f81a 	bl	80027a8 <_init>
 8002774:	2600      	movs	r6, #0
 8002776:	4d0a      	ldr	r5, [pc, #40]	; (80027a0 <__libc_init_array+0x40>)
 8002778:	4c0a      	ldr	r4, [pc, #40]	; (80027a4 <__libc_init_array+0x44>)
 800277a:	1b64      	subs	r4, r4, r5
 800277c:	10a4      	asrs	r4, r4, #2
 800277e:	42a6      	cmp	r6, r4
 8002780:	d105      	bne.n	800278e <__libc_init_array+0x2e>
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f855 3b04 	ldr.w	r3, [r5], #4
 8002788:	4798      	blx	r3
 800278a:	3601      	adds	r6, #1
 800278c:	e7ee      	b.n	800276c <__libc_init_array+0xc>
 800278e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002792:	4798      	blx	r3
 8002794:	3601      	adds	r6, #1
 8002796:	e7f2      	b.n	800277e <__libc_init_array+0x1e>
 8002798:	08002858 	.word	0x08002858
 800279c:	08002858 	.word	0x08002858
 80027a0:	08002858 	.word	0x08002858
 80027a4:	0800285c 	.word	0x0800285c

080027a8 <_init>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	bf00      	nop
 80027ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ae:	bc08      	pop	{r3}
 80027b0:	469e      	mov	lr, r3
 80027b2:	4770      	bx	lr

080027b4 <_fini>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr
